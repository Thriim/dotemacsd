:PROPERTIES:
:TOC:      :include all :force ((nothing)) :ignore ((nothing)) :local ((nothing))
:END:
#+TITLE: Emacs Init
#+AUTHOR: mattiasdrp
#+DATE: <2022-08-17 Wed>
#+LANGUAGE: en_US
#+PROPERTY: header-args :results silent :exports code :tangle yes
#+AUTO_TANGLE: t
#+STARTUP: hideblocks

#+KEYWORDS: Emacs

Literate configuration for init.el.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#header][Header]]
- [[#global-options][Global options]]
  - [[#disable-warnings][Disable warnings]]
  - [[#disableenable-features][Disable/Enable features]]
  - [[#set-useful-variables][Set useful variables]]
    - [[#init-file][Init file]]
    - [[#load-custom-file][Load custom file]]
  - [[#maximize-and-fullscreen-at-start-up][Maximize and fullscreen at start-up]]
  - [[#revert-early-init][Revert early-init]]
  - [[#gc-when-emacs-is-idle-and-never-when-using-minibuffer][GC when emacs is idle and never when using minibuffer]]
  - [[#load-functions][Load functions]]
  - [[#change-frame-title-format][Change frame title format]]
  - [[#ask-yn-instead-of-yesno][Ask y/n instead of yes/no]]
  - [[#default-values][Default values]]
  - [[#start-emacs-as-a-server][Start emacs as a server]]
  - [[#prettifying][Prettifying]]
  - [[#revert-files-when-they-changed][Revert files when they changed]]
  - [[#show-parenthesis][Show parenthesis]]
  - [[#other-useful-global-modes][Other useful global modes]]
  - [[#add-some-files-to-text-mode][Add some files to text-mode]]
  - [[#delete-whitespace][Delete whitespace]]
  - [[#set-package-archives][Set package archives]]
  - [[#initialize-packages][Initialize packages]]
  - [[#install-and-set-use-package][Install and set use-package]]
  - [[#auto-update-packages][Auto update packages]]
  - [[#no-littering][No littering]]
- [[#requirements][Requirements]]
- [[#constants-and-variables][Constants and variables]]
- [[#packages-initialization-and-configuration][Packages initialization and configuration]]
- [[#history-and-prescience][History and prescience]]
  - [[#prescient][Prescient]]
  - [[#savehist][Savehist]]
- [[#wsl-specific][WSL Specific]]
- [[#fonts-and-character-encoding][Fonts and character encoding]]
  - [[#set-environment-to-utf-8][Set Environment to UTF-8]]
  - [[#all-the-icons-and-material-icons-for-specific-range][All the icons and material icons for specific range]]
    - [[#all-the-icons-completion][All the icons completion]]
  - [[#ligatures][Ligatures]]
  - [[#ansi-color][Ansi color]]
  - [[#kurecolor][Kurecolor]]
  - [[#emojify][Emojify]]
- [[#keybindings][Keybindings]]
  - [[#general][General]]
  - [[#which-key][Which-key]]
  - [[#selected][Selected]]
  - [[#disabled-god-mode][DISABLED: God mode]]
- [[#general-utilities][General Utilities]]
  - [[#kill-ring-doesnt-kill-text-properties][Kill ring doesn't kill text properties]]
  - [[#cursor][Cursor]]
  - [[#nlinum][Nlinum]]
  - [[#cheat-sheet][Cheat Sheet]]
  - [[#crux][Crux]]
  - [[#delete-block][Delete block]]
  - [[#discover-my-major][Discover my major]]
  - [[#easy-kill][Easy-kill]]
  - [[#spell-and-grammar-checking][Spell and grammar checking]]
    - [[#flycheck-languagetool][Flycheck Languagetool]]
    - [[#flyspell][Flyspell]]
      - [[#flyspell-correct][Flyspell correct]]
  - [[#fringe-helper][Fringe helper]]
  - [[#highlight-symbol][Highlight symbol]]
  - [[#hydra][Hydra]]
  - [[#keycast][Keycast]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#hide-region][Hide region]]
  - [[#whitespace][Whitespace]]
- [[#prog-mode-utilities][Prog mode utilities]]
  - [[#disabled-highlight-indent-guides][DISABLED: Highlight indent guides]]
  - [[#apheleia][Apheleia]]
  - [[#dap][DAP]]
  - [[#dumb-jump][Dumb jump]]
  - [[#flycheck][Flycheck]]
    - [[#main-mode][Main mode]]
    - [[#flycheck-correct][Flycheck Correct]]
    - [[#quick-peek][Quick Peek]]
    - [[#flycheck-inline][Flycheck inline]]
    - [[#consult-flycheck][Consult flycheck]]
  - [[#hideshow][Hideshow]]
  - [[#projectile][Projectile]]
  - [[#separedit][Separedit]]
  - [[#treemacs][Treemacs]]
  - [[#font-lock][Font lock]]
    - [[#fontify-face][Fontify face]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#magit-todos][Magit todos]]
  - [[#highlight-todo][Highlight todo]]
  - [[#diff-hl][Diff hl]]
  - [[#git-commit][Git commit]]
  - [[#git-messenger][Git messenger]]
  - [[#git-timemachine][Git timemachine]]
  - [[#git-modes][Git modes]]
  - [[#code-review][Code review]]
  - [[#ghub][Ghub]]
- [[#windowsframe-management][Windows/Frame management]]
  - [[#uniquify][Uniquify]]
  - [[#frame][Frame]]
  - [[#winner][Winner]]
  - [[#ace-window][Ace window]]
  - [[#visual-fill-column][Visual fill column]]
  - [[#window-purpose][Window Purpose]]
- [[#completion][Completion]]
  - [[#vertico][Vertico]]
    - [[#main-mode][Main mode]]
    - [[#vertico-directory][Vertico directory]]
    - [[#vertico-multiform][Vertico multiform]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#corfu][Corfu]]
  - [[#emacs-configuration-for-minibuffers-and-completion][Emacs configuration for minibuffers and completion]]
  - [[#orderless][Orderless]]
  - [[#cape][Cape]]
  - [[#marginalia][Marginalia]]
  - [[#iedit][Iedit]]
  - [[#yasnippet][Yasnippet]]
    - [[#consult-yasnippet][Consult Yasnippet]]
  - [[#company][Company]]
  - [[#consult-company][Consult Company]]
  - [[#company-quickhelp][Company Quickhelp]]
    - [[#company-math][Company math]]
    - [[#company-web][Company web]]
    - [[#company-box][Company box]]
    - [[#company-prescient][Company prescient]]
- [[#gui][GUI]]
  - [[#themes-etc][Themes etc]]
    - [[#doom-theme][Doom theme]]
  - [[#mode-line][Mode-line]]
    - [[#anzu][Anzu]]
    - [[#doom-modeline][Doom modeline]]
    - [[#minions][Minions]]
  - [[#outline-major-and-minor-modes][Outline (major and minor modes)]]
    - [[#major-mode][Major mode]]
    - [[#minor-mode][Minor mode]]
    - [[#outshine][Outshine]]
    - [[#pretty-outlines][Pretty outlines]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#pulsar][Pulsar]]
  - [[#solaire][Solaire]]
  - [[#dashboard][Dashboard]]
  - [[#svg-tags][SVG Tags]]
- [[#eaf][EAF]]
- [[#org-mode][Org mode]]
  - [[#main-mode][Main mode]]
  - [[#org-auto-tangle][Org auto tangle]]
  - [[#org-ref][Org ref]]
  - [[#org-bullets][Org bullets]]
  - [[#org-inline-pdf][Org inline pdf]]
  - [[#calfw][Calfw]]
  - [[#calfw-org][Calfw org]]
  - [[#disabled-org-gcal][DISABLED: Org gcal]]
  - [[#org-super-agenda][Org super agenda]]
  - [[#org-appear][Org appear]]
  - [[#org-roam][Org roam]]
  - [[#org-make-toc][Org make toc]]
  - [[#org-cv][Org CV]]
- [[#mail-gpg-et-al][Mail, gpg et al]]
  - [[#pinentry][Pinentry]]
  - [[#mu4e][Mu4e]]
- [[#lsp][LSP]]
  - [[#main-mode][Main mode]]
  - [[#lsp-ui][Lsp ui]]
  - [[#lsp-treemacs][Lsp treemacs]]
  - [[#consult-lsp][Consult lsp]]
- [[#tree-sitter][Tree sitter]]
  - [[#main-mode][Main mode]]
  - [[#tree-sitter-folding][Tree sitter folding]]
- [[#programming-languages][Programming languages]]
  - [[#dataconfig-formats][Data/Config formats]]
    - [[#conf-mode][Conf mode]]
    - [[#json][Json]]
    - [[#dune-files][Dune files]]
    - [[#makefile][Makefile]]
  - [[#elisp][Elisp]]
  - [[#fsharp][Fsharp]]
  - [[#kotlin][Kotlin]]
  - [[#latex][LaTeX]]
  - [[#markdown][Markdown]]
    - [[#main-mode][Main mode]]
    - [[#markdown-toc][Markdown toc]]
    - [[#pandoc][Pandoc]]
  - [[#michelson][Michelson]]
  - [[#ocaml][OCaml]]
    - [[#useful-functions][Useful functions]]
    - [[#main-mode][Main mode]]
    - [[#tuareg-menhir][Tuareg Menhir]]
    - [[#dune-commands][Dune commands]]
  - [[#pdf-files][Pdf files]]
    - [[#saveplace-in-pdf][Saveplace in pdf]]
  - [[#python][Python]]
    - [[#main-mode][Main mode]]
    - [[#pyvenv][Pyvenv]]
    - [[#lsp-pyright][Lsp pyright]]
  - [[#reason][Reason]]
  - [[#rust][Rust]]
  - [[#web-modes][Web modes]]
    - [[#main-mode][Main mode]]
    - [[#css-mode][CSS mode]]
- [[#end][End]]
:END:

* Header
:PROPERTIES:
:CUSTOM_ID: header
:END:

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Emacs init -*- lexical-binding: t -*-
  ;;

  ;; Copyright (c) 2022 mattiasdrp and contributors.

  ;; Author: mattiasdrp
  ;; Maintainer: mattiasdrp <https://github.com/mattiasdrp>
  ;; Created: 17 august 2022
  ;; Version: 1.0
  ;; Licence: MIT
  ;; Keywords: emacs, init, convenience, configuration
  ;; URL: https://github.com/mattiasdrp/pokemacs

  ;;; Commentary:

  ;; This file IS NOT intended to be edited! It was generated by init.org.
  ;; If you want to change it, edit init.org then M-x org-babel-tangle

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; Code:

#+END_SRC

* Global options
:PROPERTIES:
:CUSTOM_ID: global-options
:END:

** Disable warnings
:PROPERTIES:
:CUSTOM_ID: disable-warnings
:END:


#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+END_SRC

** Disable/Enable features
:PROPERTIES:
:CUSTOM_ID: disableenable-features
:END:

This is a list of custom variables that allow to enable/disable features. If you want to change them, ~M-x customize-variable <custom_variable>~ will change its value in [[file:custom.el][custom.el]] allowing to maintain your own [[file:custom.el][custom.el]] file that should never be updated by me. Don't enable or disable features in this file or it will make updating it harder.

#+BEGIN_SRC emacs-lisp
  (defgroup mdrp-packages nil
    "Pokemacs packages."
    :group 'package
    :tag "Packages options group")

  (defcustom use-spotify nil
    "If non-nil, uses the spotify packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-mu4e nil
    "If non-nil, uses emacs as an email client with mu4e"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-solaire t
    "If non-nil, uses the solaire package"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-eaf t
    "If non-nil, uses the emacs application framework"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-michelson nil
    "If non-nil, uses the michelson package"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-window-purpose nil
    "If non-nil, uses the window-purpose package"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-rainbow nil
    "If non-nil, don't be @thriim"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-latex nil
    "If non-nil, uses the LaTeX packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-org-roam nil
    "If non-nil, uses Org roam"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-magit-todos nil
    "If non-nil, show todos in the current project in magit buffer"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-rust nil
    "If non-nil, uses the rust packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-ocaml t
    "If non-nil, uses the OCaml packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-reason t
    "If non-nil, uses the Reason packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-python nil
    "If non-nil, uses the Python packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-fsharp nil
    "If non-nil, uses the F# packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-kotlin nil
    "If non-nil, uses the Kotlin packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-web nil
    "If non-nil, uses the web packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-markdown t
    "If non-nil, uses the markdown packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-pandoc t
    "If non-nil, uses the pandoc packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-company t
    "If non-nil, uses the company packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-treemacs t
    "If non-nil, uses the treemacs packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-god nil
    "If non-nil, uses the god (mode) packages"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-visual-fill nil
    "If non-nil, fill the frame when there's only one"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-maximize nil
    "If non-nil, maximize emacs at startup"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom use-org-agenda-startup nil
    "Start the org agenda at start-up"
    :group 'mdrp-packages
    :type 'boolean)

  (defcustom doom-theme 'doom-solarized-dark
    "Theme to load"
    :group 'mdrp-packages
    :type 'symbol)

#+END_SRC

** Set useful variables
:PROPERTIES:
:CUSTOM_ID: set-useful-variables
:END:

*** Init file
:PROPERTIES:
:CUSTOM_ID: init-file
:END:

#+BEGIN_SRC emacs-lisp
  (setq user-init-file (or load-file-name (buffer-file-name)))
  (setq user-emacs-directory (file-name-directory user-init-file))
#+END_SRC

*** Load custom file
:PROPERTIES:
:CUSTOM_ID: load-custom-file
:END:

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

** Maximize and fullscreen at start-up
:PROPERTIES:
:CUSTOM_ID: maximize-and-fullscreen-at-start-up
:END:

This can be opted in or out by customising ~use-maximize~.

#+BEGIN_SRC emacs-lisp
  (when use-maximize
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))
#+END_SRC

** Revert early-init
:PROPERTIES:
:CUSTOM_ID: revert-early-init
:END:

The default value to use for ~gc-cons-threshold~.
If you experience freezing, decrease this.
If you experience stuttering, increase this.

#+BEGIN_SRC emacs-lisp
  (defvar better-gc-cons-threshold 67108864) ; 64mb
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 67108864)
              (setq file-name-handler-alist file-name-handler-alist-original)
              (makunbound 'file-name-handler-alist-original)))
#+END_SRC

** GC when emacs is idle and never when using minibuffer
:PROPERTIES:
:CUSTOM_ID: gc-when-emacs-is-idle-and-never-when-using-minibuffer
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+END_SRC

** Load functions
:PROPERTIES:
:CUSTOM_ID: load-functions
:END:

#+BEGIN_SRC emacs-lisp
  (defun update-to-load-path (folder)
    "Update FOLDER and its subdirectories to `load-path'."
    (let ((base folder))
      (unless (member base load-path)
        (add-to-list 'load-path base))
      (dolist (f (directory-files base))
        (let ((name (concat base "/" f)))
          (when (and (file-directory-p name)
                     (not (equal f ".."))
                     (not (equal f ".")))
            (unless (member base load-path)
              (add-to-list 'load-path name)))))))

  (update-to-load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

** Change frame title format
:PROPERTIES:
:CUSTOM_ID: change-frame-title-format
:END:

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '(buffer-file-name "%b (%f)" "%b"))
#+END_SRC

** Ask y/n instead of yes/no
:PROPERTIES:
:CUSTOM_ID: ask-yn-instead-of-yesno
:END:

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** TODO Default values
:PROPERTIES:
:CUSTOM_ID: default-values
:END:

#+BEGIN_SRC emacs-lisp
    (setq-default
     ;; Don't lock files, I know what I'm doing
     create-lockfiles nil
     ;; Always kill compilation process before starting another
     compilation-always-kill t
     ;; Save all buffers before compiling
     compilation-ask-about-save nil
     ;; TODO: Not exactly sure what this does
     compilation-context-lines t
     ;; TODO: Not exactly sure what this does
     compilation-error-screen-columns t
     ;; Scroll to the first error in the compilation buffer
     compilation-scroll-output 'first-
     ;; Number of lines in a compilation window
     compilation-window-height 12
     ;; Don't put anything in the scratch buffer
     initial-scratch-message ""
     ;; Use the clipboard too when cutting and pasting
     select-enable-clipboard t
     ;; Turn font lock mode for all mods that allow it
     ;; TODO: Specify a list when we'll start using tree-sitter
     font-lock-global-modes t
     ;; Never insert tabs when indenting (default is now to always use space)
     indent-tabs-mode nil
     ;; I know emacs, I really don't need the startup-screen
     inhibit-startup-screen t
     )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq
   ;; Ask before killing emacs
   confirm-kill-emacs 'y-or-n-p
   ;; Move point by visual lines
   line-move-visual t
   ;; Highlight the location of the next-error in the source buffer
   next-error-highlight t
   ;; Highlight the locus indefinitely until some other locus replaces it.
   next-error-highlight-no-select t
   ;; Add a newline automatically at the end of the file upon save.
   require-final-newline t
   ;; Briefly move cursor to the matching open-paren
   ;; even if it is not visible in the window.
   blink-matching-paren 'jump-offscreen
   ;; Show matching parenthesis even for comments
   blink-matching-paren-dont-ignore-comments t
   ;; Show matching parentheses even when on screen
   blink-matching-paren-on-screen t
   ;; Show column with line in the modeline
   column-number-mode t
   ;; Full comments per line
   comment-style 'indent
   ;; I don't need scroll bars
   scroll-bar-mode nil
   ;; TODO: Not sure why I'm using it
   sentence-end-double-space nil
   ;; Long lines will span on a continuation line (makes the whole line visible)
   truncate-lines nil
   ;; Flash the screen
   visible-bell t
   ;; Turn Off Cursor Alarms
   ring-bell-function 'ignore
   ;; Save backup files in a .backup directory
   backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory)))
   ;; Show Keystrokes in Progress Instantly
   echo-keystrokes 0.1
   )
#+END_SRC

 # TODO: Change ansi color COLORS "#424242" "#EF9A9A" "#C5E1A5" "#FFEE58" "#64B5F6" "#E1BEE7" "#80DEEA" "#E0E0E0"]

** Start emacs as a server
:PROPERTIES:
:CUSTOM_ID: start-emacs-as-a-server
:END:

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+END_SRC

** Prettifying
:PROPERTIES:
:CUSTOM_ID: prettifying
:END:

Enable prettifying everywhere

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  (prettify-symbols-mode)
#+END_SRC

When the cursor in on a prettified symbol, unprettify it

#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 1)
#+END_SRC

** Revert files when they changed
:PROPERTIES:
:CUSTOM_ID: revert-files-when-they-changed
:END:

This allows to let emacs revert files automatically if they were not changed directly in a buffer (log files for example)

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (auto-revert-mode t)
#+END_SRC

** Show parenthesis
:PROPERTIES:
:CUSTOM_ID: show-parenthesis
:END:

Not the same as ~blink-matching-paren*~ that triggers when you close a parenthesis. This will show the matching parenthesis when your cursor is on an open or closed parenthesis.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

The available styles are
~'parenthesis~: show the matching parenthesis
~'expression~: show the entire expression enclosed by the parenthesis
~'mixed~: show the matching paren if it is visible, and the expression
otherwise

Since this is highly user dependent (I see you @thriim), the variable ~show-paren-style~ should be set in [[file:custom.el][custom.el]]

** Other useful global modes
:PROPERTIES:
:CUSTOM_ID: other-useful-global-modes
:END:

- Display line numbers in the fringe (disabled for now because it messes with quick-peek)
  #+BEGIN_SRC emacs-lisp
    ;; (global-display-line-numbers-mode t)
  #+END_SRC
- Save the place of the cursor when exiting the buffer
  #+BEGIN_SRC emacs-lisp
    (setq save-place-forget-unreadable-files t)
    (save-place-mode 1)
  #+END_SRC
- Replace selection when writing
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode t)
  #+END_SRC
- So Long mitigates slowness due to extremely long lines.
/Currently available in Emacs master branch only!/
  #+BEGIN_SRC emacs-lisp
    (when (fboundp 'global-so-long-mode)
      (global-so-long-mode))
  #+END_SRC
- Smooth scrolling
  #+BEGIN_SRC elisp
    (unless (version< emacs-version "29")
      (pixel-scroll-precision-mode t))
  #+END_SRC

** Add some files to text-mode
:PROPERTIES:
:CUSTOM_ID: add-some-files-to-text-mode
:END:

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))
#+END_SRC

** Delete whitespace
:PROPERTIES:
:CUSTOM_ID: delete-whitespace
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Set package archives
:PROPERTIES:
:CUSTOM_ID: set-package-archives
:END:

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("elpa" . "http://elpa.gnu.org/packages/")))
#+END_SRC

** Initialize packages
:PROPERTIES:
:CUSTOM_ID: initialize-packages
:END:

#+BEGIN_SRC emacs-lisp
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))
#+END_SRC

** Install and set use-package
:PROPERTIES:
:CUSTOM_ID: install-and-set-use-package
:END:

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-verbose t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))
#+END_SRC
Will be used to download non-emacs packages needed by emacs packages

#+BEGIN_SRC emacs-lisp
  (use-package use-package-ensure-system-package :ensure t)
#+END_SRC

** Auto update packages
:PROPERTIES:
:CUSTOM_ID: auto-update-packages
:END:

Automatic updating of packages (you can customize ~auto-update-package-interval~ which default value is ~7 days~)

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-show-preview t)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-version t)
    )
#+END_SRC

** No littering
:PROPERTIES:
:CUSTOM_ID: no-littering
:END:

Stop creating files everywhere and put them all in a single place

#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :ensure t)
#+END_SRC

Create a ~#file#~ while waiting for it to be saved and for backup (if emacs crashes you can recover your previous session with ~M-x recover-session~)

#+BEGIN_SRC emacs-lisp
  (auto-save-visited-mode 1)
  (setq auto-save-default t)
  (setq auto-save-timeout 60)
  (setq auto-save-interval 200)
#+END_SRC

* Requirements
:PROPERTIES:
:CUSTOM_ID: requirements
:END:

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (require 'package)
  (require 'mdrp-functions)
#+END_SRC

* Constants and variables
:PROPERTIES:
:CUSTOM_ID: constants-and-variables
:END:

#+BEGIN_SRC emacs-lisp
  (defconst mdrp/sys/win32
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst mdrp/sys/linux
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst mdrp/sys/mac
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defvar mdrp/fd-binary
    (cl-find-if #'executable-find (list "fdfind" "fd"))
    "The filename of the `fd' executable. On some distros it's 'fdfind' (ubuntu,
  debian, and derivatives). On most it's 'fd'.")
#+END_SRC

* Packages initialization and configuration
:PROPERTIES:
:CUSTOM_ID: packages-initialization-and-configuration
:END:

Before this part you shouldn't use any ~use-package~ function since it's not loaded yet.

* History and prescience
:PROPERTIES:
:CUSTOM_ID: history-and-prescience
:END:

** [[https://github.com/radian-software/prescient.el][Prescient]]
:PROPERTIES:
:CUSTOM_ID: prescient
:END:

Sorting and filtering of completions

#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :ensure t
    :init (setq prescient-persist-mode 1))
#+END_SRC

** [[https://www.emacswiki.org/emacs/SaveHist][Savehist]]
:PROPERTIES:
:CUSTOM_ID: savehist
:END:

We're not saving the minibuffer history but compile history too

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init (savehist-mode t)
    ;; Remember recently opened files
    (recentf-mode t)
    :custom
    (history-delete-duplicates t)
    :config
    ;; Persist 'compile' history
    (add-to-list 'savehist-additional-variables 'compile-history)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
#+END_SRC

* WSL Specific
:PROPERTIES:
:CUSTOM_ID: wsl-specific
:END:

When working in WSL emacs will believe it's in a Linux environment when it's actually not

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'gnu/linux)
             (string-match
              "Linux.*Microsoft.*Linux"
              (shell-command-to-string "uname -a")))
    (setq
     browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
     browse-url-generic-args     '("/c" "start")
     browse-url-browser-function #'browse-url-generic))
#+END_SRC

* Fonts and character encoding
:PROPERTIES:
:CUSTOM_ID: fonts-and-character-encoding
:END:

** Set Environment to UTF-8
:PROPERTIES:
:CUSTOM_ID: set-environment-to-utf-8
:END:

Set the default coding system to UTF-8.This idea came from the Doom Emacs early-init.el file.

#+BEGIN_SRC emacs-lisp
  (unless mdrp/sys/win32
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8))
#+END_SRC

** [[https://github.com/domtronn/all-the-icons.el][All the icons]] and material icons for specific range
:PROPERTIES:
:CUSTOM_ID: all-the-icons-and-material-icons-for-specific-range
:END:

In order to use this package you need to run ~M-x all-the-icons-install~ the first time your configuration is loaded

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
    :config
    (set-fontset-font t '(#xe3d0 . #xe909) "Material Icons"))
#+END_SRC

Other all-the-icons related packages:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+END_SRC

*** [[https://github.com/iyefrat/all-the-icons-completion][All the icons completion]]
:PROPERTIES:
:CUSTOM_ID: all-the-icons-completion
:END:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-completion
    :ensure t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+END_SRC

** [[https://github.com/mickeynp/ligature.el][Ligatures]]
:PROPERTIES:
:CUSTOM_ID: ligatures
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :ensure t
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '(
                                         "www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=""..<""?=" "??" ";;" "/*" "/**"
                                         ;; "..""..."
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%" "[|" "|]"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+END_SRC

** [[https://www.emacswiki.org/emacs/AnsiColor][Ansi color]]
:PROPERTIES:
:CUSTOM_ID: ansi-color
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    :hook
    (shell-mode . ansi-color-for-comint-mode-on)
    )
#+END_SRC

** [[https://github.com/emacsfodder/kurecolor][Kurecolor]]
:PROPERTIES:
:CUSTOM_ID: kurecolor
:END:

#+BEGIN_SRC emacs-lisp
  (use-package kurecolor
    :ensure t)
#+END_SRC

** [[https://github.com/iqbalansari/emacs-emojify][Emojify]]
:PROPERTIES:
:CUSTOM_ID: emojify
:END:

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+END_SRC

* Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

** [[https://github.com/noctuid/general.el][General]]
:PROPERTIES:
:CUSTOM_ID: general
:END:

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :ensure t
    :init
    (general-unbind
      "C-o"
      "C-f"
      "C-z"
      "C-x C-z"
      "M-z"
      "M-m"
      "M-l"
      "M-h"
      "M-/"
      "M-l"
      "M-f"
      )
    (general-define-key
     [remap indent-for-tab-command]       'company-indent-or-complete-common
     [remap kill-buffer]                  'kill-this-buffer
     [remap ispell-word]                  'flyspell-correct-at-point
     ;; Prefixed by C
     "C-x C-1"                 'delete-other-windows
     "C-x C-2"                 'split-window-below
     "C-x C-3"                 'split-window-right
     "C-x C-0"                 'delete-window

     "C-x &"                   'delete-other-windows
     "C-x é"                   'split-window-below
     "C-x \""                  'split-window-right
     "C-x à"                   'delete-window

     "C-x C-l"                 'toggle-truncate-lines
     "C-="                     'text-scale-increase
     "C-+"                     'text-scale-increase
     "C--"                     'text-scale-decrease
     "C-c h b"                 'describe-personal-keybindings
     ;; Create new line contextualised by the previous one
     ;; (will add a comment if in comment mode for example)
     "C-<return>"              'default-indent-new-line
     ;; emacs autocompletion (not like company)
     "C-<tab>"                 'dabbrev-expand
     "C-n"                     'next-error
     "C-p"                     'previous-error
     ;; windmove
     "C-x <left>"              'windmove-left
     "C-x <right>"             'windmove-right
     "C-x <up>"                'windmove-up
     "C-x <down>"              'windmove-down
     "C-x C-o"                 'ace-window

     ;; rotate buffers and window arrangements
     "C-c r w"                 'rotate-window
     "C-c r l"                 'rotate-layout

     ;; Prefixed by M
     "M-u"                     'upcase-dwim

     "M-J"                     (lambda () (interactive) (mdrp/resize-window t 5))
     "M-L"                     (lambda () (interactive) (mdrp/resize-window t -5))
     "M-I"                     (lambda () (interactive) (mdrp/resize-window nil 5))
     "M-K"                     (lambda () (interactive) (mdrp/resize-window nil -5))
     ;; Custom comment overwriting comment-dwim key binding
     "M-;"                     'mdrp/comment-eclipse
     "M-p"                     'backward-paragraph
     "M-<f1>"                  'kill-this-buffer
     "M-Q"                     'unfill-paragraph

     "M-+"                     'hs-toggle-hiding
     "M-*"                     'hs-show-all

     ;; Function keys
     [f3]                      'next-match
     [(shift f3)]              'prev-match
     [f4]                      'goto-line
     [f5]                      'compile
     [f6]                      'recompile
     [f7]                      'next-error
     [f8]                      'normal-mode
     )
    (general-define-key
     :prefix "M-z"
     ;; Setup shorcuts for window resize width and height
     "w"                       'mdrp/resize-window-width
     "h"                       'mdrp/resize-window-height)
    (general-define-key
     :prefix "M-h"
     "d"                       'hydra-dates/body)
    (general-def minibuffer-local-map
      "C-<tab>" 'dabbrev-expand)

    (general-def flyspell-mouse-map
      "RET"                     'flyspell-correct-at-point
      [return]                  'flyspell-correct-at-point
      ))
#+END_SRC

** [[https://github.com/justbur/emacs-which-key][Which-key]]
:PROPERTIES:
:CUSTOM_ID: which-key
:END:

Useful packages that allows to see the possible keys after starting a combination of keys.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :config
    (which-key-add-major-mode-key-based-replacements 'markdown-mode
      "C-c TAB" "markdown/images"
      "C-c C-a" "markdown/links"
      "C-c C-c" "markdown/process"
      "C-c C-s" "markdown/style"
      "C-c C-t" "markdown/header"
      "C-c C-x" "markdown/structure"
      "C-c m" "markdown/personal")
    (which-key-add-major-mode-key-based-replacements 'web-mode
      "C-c C-a" "web/attributes"
      "C-c C-b" "web/blocks"
      "C-c C-d" "web/dom"
      "C-c C-e" "web/element"
      "C-c C-t" "web/tags")
    (which-key-setup-side-window-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 0.1)
    :custom
    (which-key-separator " ")
    (which-key-prefix-prefix "+")
    )
#+END_SRC

** [[https://github.com/Kungsgeten/selected.el][Selected]]
:PROPERTIES:
:CUSTOM_ID: selected
:END:

#+BEGIN_SRC emacs-lisp
  (use-package selected
    :ensure t
    :init
    (require 'hide-region)
    (selected-global-mode)
    :general
    (:keymaps 'selected-keymap
              ;; "C-?"                     'hydra-selected/body
              "<"                       'mc/mark-previous-like-this
              ">"                       'mc/mark-next-like-this
              "C-<"                     'mc/unmark-previous-like-this
              "C->"                     'mc/unmark-next-like-this
              "M-<"                     'mc/skip-to-previous-like-this
              "M->"                     'mc/skip-to-next-like-this
              "C-c >"                   'mc/edit-lines
              "M-c"                     'capitalize-dwim
              "M-d"                     'downcase-dwim
              "M-u"                     'upcase-dwim
              "C-f"                     'fill-region
              "C-q"                     'selected-off
              "M-s r"                   'reverse-region
              "M-s s"                   'sort-lines
              "M-s w"                   'mdrp/sort-words
              "C-<return>"              'hide-region-hide
              "C-p"                     '(hide-region-pin :which-key "Pins the selected region on top of the current window")))
#+END_SRC

** DISABLED: [[https://github.com/emacsorphanage/god-mode][God mode]]
:PROPERTIES:
:CUSTOM_ID: disabled-god-mode
:END:

This mode allows to switch between a mode where modifier keys are not used (~C-key~ is replaced by ~key~ and ~M-key~ by ~g key~. However, in my current config I often have ~C-key key'~ bindings and I would need to rebind them to ~C-key C-key'~ to have a seemless experience with this mode and I didn't find the need for it as of now.

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :disabled
    :init
    (setq god-mode-enable-function-key-translation nil)
    :config
    (defun my-god-mode-update-modeline ()
      (cond (god-local-mode (progn
                              (set-face-background 'mode-line "#e9e2cb")
                              (set-face-foreground 'mode-line "black")
                              (set-face-background 'mode-line-inactive "#e9e2cb")
                              (set-face-foreground 'mode-line-inactive "black")
                              ))
            (t (progn
                 (set-face-background 'mode-line "#0a2832")
                 (set-face-foreground 'mode-line "white")
                 (set-face-background 'mode-line-inactive "#0a2832")
                 (set-face-foreground 'mode-line-inactive "white")
                 ))))
    (add-hook 'god-mode-enabled-hook #'my-god-mode-update-modeline)
    (add-hook 'god-mode-disabled-hook #'my-god-mode-update-modeline)
    (setq god-exempt-major-modes nil)
    (setq god-exempt-predicates nil)
    :general (
           ("<escape>"                'god-mode-all)
           ("²"                       'god-mode-all)
           ("C-²"                     'god-mode-all)
           )
    )
#+END_SRC

* General Utilities
:PROPERTIES:
:CUSTOM_ID: general-utilities
:END:

This part will load packages that are useful for emacs and are not specific to modes (usually, better commands and buffer manipulations)

** Kill ring doesn't kill text properties
:PROPERTIES:
:CUSTOM_ID: kill-ring-doesnt-kill-text-properties
:END:

#+BEGIN_SRC emacs-lisp
  (defun mdrp/unpropertize-kill-ring ()
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook 'mdrp/unpropertize-kill-ring)
#+END_SRC

** Cursor
:PROPERTIES:
:CUSTOM_ID: cursor
:END:

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-in-non-selected-windows t) ; Hide the cursor in inactive windows
 #+END_SRC

** [[https://github.com/emacsmirror/nlinum/blob/master/nlinum.el][Nlinum]]
:PROPERTIES:
:CUSTOM_ID: nlinum
:END:

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :init
    (global-nlinum-mode 1)
    :ensure t
    :config
    (setq nlinum--width (length (number-to-string (count-lines (point-min) (point-max)))))
    )
#+END_SRC

** [[https://github.com/mykyta-shyrin/cheatsheet][Cheat Sheet]]
:PROPERTIES:
:CUSTOM_ID: cheat-sheet
:END:

When I have the time

#+BEGIN_SRC emacs-lisp
  (use-package cheatsheet
    :defer t
    )
#+END_SRC

** [[https://github.com/bbatsov/crux][Crux]]
:PROPERTIES:
:CUSTOM_ID: crux
:END:

Useful commands. Notably (not all of them are crux but we put them in the crux command map) :

- ~C-x K~: Kill all buffers except the active one
- ~M-m e~: Edit a file with sudo
- ~M-m u/d/c~: upcase/downcase/capitalize region or word at point


#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :init
    (define-prefix-command 'mdrp-crux-map nil "Crux-")
    :general
    ("M-m" 'mdrp-crux-map)
    ("C-a" 'crux-move-beginning-of-line)
    ("C-x 4 t" 'crux-transpose-windows)
    ("C-x K" 'crux-kill-other-buffers)
    ("C-k" 'crux-smart-kill-line)
    (:keymaps 'mdrp-crux-map
              "w" '(crux-view-url :which-key "Open a new buffer containing the contents of URL.")
              "o" '(crux-open-with :which-key "Open visited file in default external program.")
              "e" '(crux-sudo-edit :which-key "Edit currently visited file as root.")
              "i" '(crux-insert-date :which-key "Insert a timestamp according to locale's date and time format.")
              "t" '(crux-transpose-windows :which-key "Transpose the buffers shown in two windows.")
              "j" '(crux-top-join-line :which-key "Join the current line with the line beneath it.")
              "u" '(upcase-dwim :which-key "upcase region if a region is active or word at point.")
              "d" '(downcase-dwim :which-key "downcase region if a region is active or word at point.")
              "c" '(capitalize-dwim :which-key "capitalize region if a region is active or word at point.")
              "r" '(crux-recompile-init :which-key "Byte-compile all your dotfiles again.")
              "k" '(crux-smart-kill-line :which-key "Kill to the end of the line and kill whole line on the next call.")
              "M-k" '(crux-kill-line-backwards :which-key "Kill line backwards and adjust the indentation.")
              "a" '(crux-move-beginning-of-line :which-key "Move point back to indentation/beginning (toggle) of line.")
              "s" '(crux-ispell-word-then-abbrev :which-key "Call `ispell-word', then create an abbrev for it.")
              )
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer)
    )
#+END_SRC

** [[https://github.com/manateelazycat/delete-block][Delete block]]
:PROPERTIES:
:CUSTOM_ID: delete-block
:END:

Better block deletion.

#+BEGIN_SRC emacs-lisp
  (use-package delete-block
    :load-path "lisp/"
    :general
    ("C-d"                     'delete-block-forward)
    ("C-<backspace>"           'delete-block-backward)
    ("M-<backspace>"           'delete-block-backward)
    )
#+END_SRC

** [[https://framagit.org/steckerhalter/discover-my-major][Discover my major]]
:PROPERTIES:
:CUSTOM_ID: discover-my-major
:END:

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :after general
    :ensure t
    :general ("C-h C-m" 'discover-my-major))
#+END_SRC

** [[https://github.com/leoliu/easy-kill][Easy-kill]]
:PROPERTIES:
:CUSTOM_ID: easy-kill
:END:

Better ~M-w~

#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC

** Spell and grammar checking
:PROPERTIES:
:CUSTOM_ID: spell-and-grammar-checking
:END:

*** [[https://github.com/emacs-languagetool/flycheck-languagetool][Flycheck Languagetool]]
:PROPERTIES:
:CUSTOM_ID: flycheck-languagetool
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-languagetool
    :ensure t
    ;; :custom ((flycheck-languagetool-active-modes
    ;;           '(text-mode latex-mode org-mode markdown-mode message-mode prog-mode)))
    :hook (text-mode . flycheck-languagetool-setup)
    ;; :ensure-system-package
    ;;   ("LanguageTool-5.9-stable/languagetool-commandline.jar" . "curl -L https://raw.githubusercontent.com/languagetool-org/languagetool/master/install.sh | sudo bash -a")
    :init
    (setq flycheck-languagetool-server-jar (concat (getenv "HOME") "/.emacs.d/LanguageTool-5.9-stable/languagetool-server.jar")))
#+END_SRC

*** [[https://www.emacswiki.org/emacs/FlySpell][Flyspell]]
:PROPERTIES:
:CUSTOM_ID: flyspell
:END:

Flyspell in text or programs (will only check comments and strings). You can change the dictionary used by invoking ~M-x mdrp/change-dict RET <language>~ or faster with ~M-f f~ for french dictionary and ~M-f e~ for english dictionary.

Flyspell is automatically activated but you can toggle it with ~M-f t~.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (defun mdrp/flyspell-on-for-buffer-type ()
      "Enable Flyspell appropriately for the major mode of the current buffer.
    Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings
    and comments get checked.  All other buffers get `flyspell-mode' to check
    all text.  If flyspell is already enabled, does nothing."
      (interactive)
      (if (not (symbol-value flyspell-mode)) ; if not already on
          (if (derived-mode-p 'pdf-view-mode)
              (message "Flyspell off (pdf-view)")
            (progn
              (if (derived-mode-p 'prog-mode)
                  (progn
                    (message "Flyspell on (code)")
                    (flyspell-prog-mode))
                ;; else
                (progn
                  (message "Flyspell on (text)")
                  (flyspell-mode 1)
                  )
                )
              )
            )
        )
      )

    (defun mdrp/change-dict (lang)
      "Change dictionary to english. LANG is the desired language"
      (interactive "sLang: ")
      (ispell-change-dictionary lang)
      (mdrp/flyspell-on-for-buffer-type)
      )

    (defun mdrp/english-dict ()
      "Change dictionary to english."
      (interactive)
      (mdrp/change-dict "english")
      )

    (defun mdrp/french-dict ()
      "Change dictionary to french."
      (interactive)
      (mdrp/change-dict "francais")
      )

    (defun mdrp/flyspell-toggle ()
      "Turn Flyspell on if it is off, or off if it is on.  When turning on,
    it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
      (interactive)
      (if (symbol-value flyspell-mode)
          (progn ; flyspell is on, turn it off
            (message "Flyspell off")
            (flyspell-mode -1))
        ;; else - flyspell is off, turn it on
        (mdrp/flyspell-on-for-buffer-type)))

    :defer t
    :hook (find-file . mdrp/flyspell-on-for-buffer-type)
    :general
    ("M-f" 'mdrp-fly-map)
    ("C-f" 'mdrp-fly-map)
    (:keymaps 'flyspell-mode-map
              "C-;" nil)
    (:keymaps 'mdrp-fly-map
              "t" '(mdrp/flyspell-toggle :which-key "toggle flyspell mode and decides to put it in prog or text mode")
              "f" '(mdrp/french-dict :which-key "load the french dictionary")
              "e" '(mdrp/english-dict :which-key "load the english dictionary")
              )
    :ensure-system-package aspell
    ;; :ensure-system-package aspell-fr
    ;; :ensure-system-package aspell-en
    :config
    (provide 'ispell) ; forcibly load ispell configs

    (setq ispell-list-command "--list")
    (setq ispell-dictionary "english")
    (setq-default flyspell-prog-text-faces
                  '(tree-sitter-hl-face:comment
                    tree-sitter-hl-face:doc
                    tree-sitter-hl-face:string
                    font-lock-comment-face
                    font-lock-doc-face
                    font-lock-string-face))
    (defun flyspell-buffer-after-pdict-save (&rest _)
      (flyspell-buffer))

    (advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)
    (setq flyspell-issue-welcome-flag nil
          ;; Significantly speeds up flyspell, which would otherwise print
          ;; messages for every word when checking the entire buffer
          flyspell-issue-message-flag nil)

    (add-hook 'flyspell-mode-hook
              (defun +spell-inhibit-duplicate-detection-maybe-h ()
                "Don't mark duplicates when style/grammar linters are present.
    e.g. proselint and langtool."
                (and (or (and (bound-and-true-p flycheck-mode)
                              (executable-find "proselint"))
                         (featurep 'langtool))
                     (setq-local flyspell-mark-duplications-flag nil))))
    (defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
      (let* ((rlt ad-return-value)
             (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\|example\\|quote\\)")
             (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\|example\\|quote\\)")
             (case-fold-search t)
             b e)
        (when ad-return-value
          (save-excursion
            (setq b (re-search-backward begin-regexp nil t))
            (if b (setq e (re-search-forward end-regexp nil t))))
          (if (and b e (< (point) e)) (setq rlt nil)))
        (setq ad-return-value rlt)))
    )
#+END_SRC

**** [[https://github.com/d12frosted/flyspell-correct][Flyspell correct]]
:PROPERTIES:
:CUSTOM_ID: flyspell-correct
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :general
    (:keymaps 'popup-menu-keymap
              "<return>" 'popup-select)
    (:keymaps 'mdrp-fly-map
              "C-f" 'flyspell-correct-wrapper
              ))
#+END_SRC

** [[https://github.com/nschum/fringe-helper.el][Fringe helper]]
:PROPERTIES:
:CUSTOM_ID: fringe-helper
:END:

Helper functions for emacs fringe bitmaps that are used by some packages used in the following configuration file.

#+BEGIN_SRC emacs-lisp
  (use-package fringe-helper
    :ensure t)
#+END_SRC

** [[https://github.com/nschum/highlight-symbol.el][Highlight symbol]]
:PROPERTIES:
:CUSTOM_ID: highlight-symbol
:END:

Allows to go to the next/previous same symbol with ~M-S~<down>/<up>~.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :init (highlight-symbol-mode)
    :general
    (:keymaps 'highlight-symbol-nav-mode-map
              "M-n" nil
              "M-p" nil
              )
    ("M-S-<down>"   '(highlight-symbol-next :which-key "go to the next symbol"))
    ("M-S-<up>"     '(highlight-symbol-prev :which-key "go to the previous symbol"))
    :config
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
#+END_SRC

** [[https://github.com/abo-abo/hydra][Hydra]]
:PROPERTIES:
:CUSTOM_ID: hydra
:END:

Not using it to its full potential right now but only for useful dates:

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :custom
    (hydra-default-hint nil)
    :config
    (defhydra hydra-dates (:color teal)
      (concat "\n " (mdrp/hydra-heading "Dates" "Insert" "Insert with Time")
              "
   _q_ quit              _d_ short             _D_ short             ^^
   ^^                    _i_ iso               _I_ iso               ^^
   ^^                    _l_ long              _L_ long              ^^
  ")
      ("q" nil)
      ("d" mdrp/date-short)
      ("D" mdrp/date-short-with-time)
      ("i" mdrp/date-iso)
      ("I" mdrp/date-iso-with-time)
      ("l" mdrp/date-long)
      ("L" mdrp/date-long-with-time))
    )
#+END_SRC

** [[https://github.com/tarsius/keycast/][Keycast]]
:PROPERTIES:
:CUSTOM_ID: keycast
:END:

Needs to be manually activated. Will display all the actions made.

#+BEGIN_SRC emacs-lisp
  (use-package keycast
    :ensure t
    :config
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+END_SRC

Useful package that allows to go to the next and previous symbols at point with ~M-S-<down>~ and ~M-S-<up>~.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :general
    ("M-S-<down>"   '(highlight-symbol-next :which-key "go to the next symbol"))
    ("M-S-<up>"     '(highlight-symbol-prev :which-key "go to the previous symbol"))
    :config
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]
:PROPERTIES:
:CUSTOM_ID: multiple-cursors
:END:

Allows to have multiple cursors. There are a lot of functions provided by this mode but since I don't use this feature a lot I'd advise looking at the mode documentation. I mostly use it in conjunction with [[#selected][Selected]] (with ~>~, ~<~ and ~RET~).1

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :general
    ("C-c n" 'mc/mark-next-like-this)
    ("C-c p" 'mc/mark-previous-like-this)
    ("C-c a" 'mc/mark-all-like-this)
    )
#+END_SRC

** TODO Hide region
:PROPERTIES:
:CUSTOM_ID: hide-region
:END:

TODO: hide-region-unpin doesn't work when changing buffer.

#+BEGIN_SRC emacs-lisp
  (use-package hide-region
    :load-path "lisp/"
    :commands hide-region-pin
    :general
    ("C-c r u" 'hide-region-unpin)
    )

  (use-package hide-mode-line
    :ensure t
    )
#+END_SRC

** [[https://www.emacswiki.org/emacs/WhiteSpace][Whitespace]]
:PROPERTIES:
:CUSTOM_ID: whitespace
:END:

Simple mode to visualize blanks

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook
    (prog-mode . whitespace-mode)
    (text-mode . whitespace-mode)
    :custom
    (whitespace-style '(face empty indentation::space tab trailing)))
#+END_SRC

* Prog mode utilities
:PROPERTIES:
:CUSTOM_ID: prog-mode-utilities
:END:

** DISABLED: [[https://github.com/DarthFennec/highlight-indent-guides][Highlight indent guides]]
:PROPERTIES:
:CUSTOM_ID: disabled-highlight-indent-guides
:END:

Show level of indentations. Can't manage to give it the proper colour and always found it distracting so putting it on hold for now.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :disabled
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-auto-enabled nil)
    ;; (setq highlight-indent-guides-responsive 'stack)
    (set-face-background 'highlight-indent-guides-stack-character-face "red")
    (set-face-background 'highlight-indent-guides-top-character-face "pink")
    (set-face-foreground 'highlight-indent-guides-character-face "white")
    (setq highlight-indent-guides-method 'bitmap)
    )
#+END_SRC

** [[https://github.com/radian-software/apheleia][Apheleia]]
:PROPERTIES:
:CUSTOM_ID: apheleia
:END:

Asynchronous code formatting after saving files.

#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :ensure t
    :hook
    (tuareg-mode  . apheleia-mode)
    (caml-mode    . apheleia-mode)
    (python-mode  . apheleia-mode)
    (fsharp-mode  . apheleia-mode)
    (kotlin-mode  . apheleia-mode)
    (rustic-mode  . apheleia-mode)
    :config
    (setf (alist-get 'isort apheleia-formatters)
        '("isort" "--stdout" "-"))
    (setf (alist-get 'python-mode apheleia-mode-alist)
          '(isort black)))
#+END_SRC

** [[https://github.com/emacs-lsp/dap-mode][DAP]]
:PROPERTIES:
:CUSTOM_ID: dap
:END:

Debug Adapter Protocol client for emacs. Need to play a bit with it to know how to use it.

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    (dap-auto-configure-mode))
#+END_SRC

** [[https://github.com/jacktasia/dumb-jump][Dumb jump]]
:PROPERTIES:
:CUSTOM_ID: dumb-jump
:END:

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (defhydra dumb-jump-hydra (:color blue :columns 3)
      "Dumb Jump"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back"))
    )
#+END_SRC

** [[https://github.com/flycheck/flycheck][Flycheck]]
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:

On the fly syntax checking. One of the greatest package there is for making programming easier.

*** Main mode
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :preface
    (define-prefix-command 'mdrp-fly-map nil "Fly-")
    :ensure t
    :config
    (advice-add 'flycheck-next-error :filter-args #'flycheck-reset)
    (defun flycheck-reset (&optional n reset)
      (if (flycheck-next-error-pos n reset)
          (list n reset)
        (list n t)))
    :general
    (:keymaps 'mdrp-fly-map
              "p" 'flycheck-prev-error)
    :hook ((prog-mode markdown-mode git-commit-mode) . flycheck-mode))
#+END_SRC

*** Flycheck Correct
:PROPERTIES:
:CUSTOM_ID: flycheck-correct
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-correct
  :load-path "lisp/"
  :hook flycheck-mode
  :general
  (:keymaps 'flycheck-mode-map
            "M-RET" 'mdrp/correct-or-newline))
#+END_SRC

*** [[https://github.com/cpitclaudel/quick-peek][Quick Peek]]
:PROPERTIES:
:CUSTOM_ID: quick-peek
:END:

#+BEGIN_SRC emacs-lisp
  (use-package quick-peek
    :ensure t
    )
#+END_SRC

*** [[https://github.com/flycheck/flycheck-inline][Flycheck inline]]
:PROPERTIES:
:CUSTOM_ID: flycheck-inline
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-inline
    :ensure t
    :after quick-peek
    :hook (flycheck-mode . flycheck-inline-mode)
    :config
    (setq flycheck-inline-display-function
          (lambda (msg pos err)
            (let* ((ov (quick-peek-overlay-ensure-at pos))
                   (contents (quick-peek-overlay-contents ov)))
              (setf (quick-peek-overlay-contents ov)
                    (concat contents (when contents "\n") msg))
              (quick-peek-update ov)))
          flycheck-inline-clear-function #'quick-peek-hide)
    )

#+END_SRC

*** [[https://github.com/minad/consult-flycheck][Consult flycheck]]
:PROPERTIES:
:CUSTOM_ID: consult-flycheck
:END:

#+BEGIN_SRC emacs-lisp
  (use-package consult-flycheck
    :ensure t
    :general
    ("C-c l" 'consult-flycheck))
#+END_SRC

** [[https://www.emacswiki.org/emacs/HideShow][Hideshow]]
:PROPERTIES:
:CUSTOM_ID: hideshow
:END:

#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :commands (hs-minor-mode
               hs-toggle-hiding)
    :diminish hs-minor-mode
    :config
    (setq hs-isearch-open t)
    )
#+END_SRC

** [[https://github.com/bbatsov/projectile][Projectile]]
:PROPERTIES:
:CUSTOM_ID: projectile
:END:

Project interaction library.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :general
    ("M-p" 'projectile-command-map)
    :init
    (projectile-mode 1)
    )
#+END_SRC

** [[https://github.com/twlz0ne/separedit.el][Separedit]]
:PROPERTIES:
:CUSTOM_ID: separedit
:END:

Allows to edit comments in a separate buffer with a chosen text-mode (default is markdown-mode). When inside a comment, hit ~C-c C-e~ to start editing it in its own buffer.

#+BEGIN_SRC emacs-lisp
  (use-package separedit
    :ensure t
    :general
    ("C-c C-e"                 'separedit)
    :config
    (setq separedit-default-mode 'markdown-mode)
    )
#+END_SRC

** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]
:PROPERTIES:
:CUSTOM_ID: treemacs
:END:

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t)
#+END_SRC

** Font lock
:PROPERTIES:
:CUSTOM_ID: font-lock
:END:

*** [[https://github.com/Fuco1/fontify-face][Fontify face]]
:PROPERTIES:
:CUSTOM_ID: fontify-face
:END:

Allows to see immediately how a face will look

#+BEGIN_SRC emacs-lisp
  (use-package fontify-face
    :ensure t
    :hook (font-lock-mode . fontify-face-mode)
    )
#+END_SRC

* Git
:PROPERTIES:
:CUSTOM_ID: git
:END:

** [[https://magit.vc/][Magit]]
:PROPERTIES:
:CUSTOM_ID: magit
:END:

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-auto-revert-mode t)
    (setq magit-auto-revert-immediately t)
    (defun mdrp/smerge-or-flycheck-next ()
      (interactive)
      (let (files (vc-git-conflicted-files default-directory))
        (if (null files)
            (flycheck-next-error)
          (smerge-vc-next-conflict))))
    :general
    ("M-v"    '(:keymap magit-mode-map :package magit :wk "Magit-:"))
    ("M-n"    'mdrp/smerge-or-flycheck-next)
    (:keymaps 'smerge-mode-map
              "M-m"                 'smerge-keep-mine
              "M-o"                 'smerge-keep-other
              )
    (:keymaps 'magit-mode-map
              "g"             'magit-status
              "G"             'git-messenger:popup-message
              "M-g"           'magit-dispatch
              )
    )
#+END_SRC

** [[https://github.com/alphapapa/magit-todos][Magit todos]]
:PROPERTIES:
:CUSTOM_ID: magit-todos
:END:

Adds a list of TODOS and other keywords (that can be found with ~M-h v magit-todos-keywords-list~). If you experience massive freezing when opening a magit buffer you can customize ~hl-todo-keywords-faces~ to only include your custom keywords.

#+BEGIN_SRC emacs-lisp
  (when use-magit-todos
    (use-package magit-todos
      :ensure t
      :config
      (setq magit-todos-keywords-list (-mapcat (lambda (assoc) (list (car assoc))) hl-todo-keyword-faces))
      :hook
      (magit-mode . magit-todos-mode)))
#+END_SRC

** [[https://github.com/tarsius/hl-todo][Highlight todo]]
:PROPERTIES:
:CUSTOM_ID: highlight-todo
:END:

Customize ~hl-todo-keyword-faces~ to choose the keywords you want to highlights (an example is already available in [[file:custom.el][custom.el]])

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode 1))
#+END_SRC

** [[https://github.com/dgutov/diff-hl][Diff hl]]
:PROPERTIES:
:CUSTOM_ID: diff-hl
:END:

Nice mode to display on the fringe the uncommitted changes.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :custom
    (global-diff-hl-mode 1)
    (diff-hl-side 'right)
    :hook
    (magit-post-refresh . diff-hl-magit-post-refresh)
    (magit-pre-refresh  . diff-hl-magit-pre-refresh)
    )
#+END_SRC

** [[https://magit.vc/manual/magit/Commit-Mode-and-Hooks.html][Git commit]]
:PROPERTIES:
:CUSTOM_ID: git-commit
:END:

Adds keybindings when editing a commit message.

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :hook (git-commit-mode . mdrp/english-dict))
#+END_SRC

** [[https://github.com/emacsorphanage/git-messenger][Git messenger]]
:PROPERTIES:
:CUSTOM_ID: git-messenger
:END:

Show the commit at point to see what happened here. Invoke with ~M-v G~.

#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :ensure t
    :config
    (setq git-messenger:show-detail t
          git-messenger:use-magit-popup t))
#+END_SRC

** TODO [[https://github.com/emacsmirror/git-timemachine][Git timemachine]]
:PROPERTIES:
:CUSTOM_ID: git-timemachine
:END:

Go back in time with ~M-v <left>~ then travel through commits with ~p~, ~n~ and other commands listed in the package documentation.

TODO: Display possible commands when git-timemachine starts

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :general
    (:keymaps 'magit-mode-map
              "<left>" '(git-timemachine :wk "Go back in git history"))
    )
#+END_SRC

** [[https://github.com/magit/git-modes/][Git modes]]
:PROPERTIES:
:CUSTOM_ID: git-modes
:END:

Major modes for editing .gitignore files, .git/config etc

#+BEGIN_SRC emacs-lisp
  (use-package git-modes
    :ensure t)
#+END_SRC

** [[https://github.com/wandersoncferreira/code-review][Code review]]
:PROPERTIES:
:CUSTOM_ID: code-review
:END:

Some configuration is needed for this to work. See [[file:README.org::#git-hosts-and-forges][README.org Git hosts and forges]]

#+BEGIN_SRC emacs-lisp
  (use-package code-review
    :ensure t
    :config
    (setq code-review-download-dir (no-littering-expand-var-file-name "backups/")))
#+END_SRC

** [[https://github.com/magit/ghub][Ghub]]
:PROPERTIES:
:CUSTOM_ID: ghub
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ghub
    :ensure t
  )
#+END_SRC

* Windows/Frame management
:PROPERTIES:
:CUSTOM_ID: windowsframe-management
:END:

** Uniquify
:PROPERTIES:
:CUSTOM_ID: uniquify
:END:

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'reverse
          uniquify-separator " • "
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re "^\\*"))
#+END_SRC

** TODO Frame
:PROPERTIES:
:CUSTOM_ID: frame
:END:

Try to create frames that are nicer.

#+BEGIN_SRC emacs-lisp
  (use-package frame
    :disabled
    :config
    (setq default-frame-alist
          '(
            (min-height . 1)
            '(height . 45)
            (min-width  . 1)
            '(width  . 81)
            (vertical-scroll-bars . nil)
            ;; (internal-border-width . 24)
            (left-fringe . 1)
            (right-fringe . 1)
            (tool-bar-lines . 0)
            (menu-bar-lines . 1)))
    ;; Default frame settings
    (setq initial-frame-alist default-frame-alist))

#+END_SRC

** [[https://www.emacswiki.org/emacs/WinnerMode][Winner]]
:PROPERTIES:
:CUSTOM_ID: winner
:END:

Allows to undo and redo changes in window configurations

#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure nil
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1))
#+END_SRC

** [[https://github.com/abo-abo/ace-window][Ace window]]
:PROPERTIES:
:CUSTOM_ID: ace-window
:END:

~C-x C-o~ for better window switching.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-dispatch-always t)
    (set-face-attribute 'aw-leading-char-face nil :height 2.5))
#+END_SRC

** [[https://codeberg.org/joostkremers/visual-fill-column][Visual fill column]]
:PROPERTIES:
:CUSTOM_ID: visual-fill-column
:END:

This mode will center the text when only one window is displayed.

#+BEGIN_SRC emacs-lisp
  (when use-visual-fill
    (use-package visual-fill-column
      :ensure t
      :custom
      (visual-fill-column-width 100)
      (visual-fill-column-center-text t)
      :config

      (defun mdrp/visual-fill-one-window ()
        (global-visual-fill-column-mode -1)
        (if (window-full-width-p)
            (global-visual-fill-column-mode 1)
          (global-visual-fill-column-mode -1)
          )
        )

      (add-hook 'window-state-change-hook 'mdrp/visual-fill-one-window)
      :hook ((prog-mode org-mode text-mode) . visual-fill-column-mode)
      ))
#+END_SRC

** Window Purpose
:PROPERTIES:
:CUSTOM_ID: window-purpose
:END:

#+BEGIN_SRC emacs-lisp
  (when use-window-purpose
    (use-package window-purpose
      :ensure t
      :config
      (purpose-mode)
      (purpose-x-magit-multi-on)))
#+END_SRC

* Completion
:PROPERTIES:
:CUSTOM_ID: completion
:END:

By completion two things are intended:
- text completion (be it for programs or simple text, see [[#company][Company]])
- minibuffer and command completions (emacs related, see [[#vertico][Vertico]] and friends below)

** [[https://kristofferbalintona.me/posts/202202211546/][Vertico]]
:PROPERTIES:
:CUSTOM_ID: vertico
:END:

Vertico works with the default completion system instead of reimplementing a whole system allowing better flexibility and package binding.

*** [[https://github.com/minad/vertico][Main mode]]
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :after general
    :init
    (vertico-mode)
    :general
    (:keymaps 'vertico-map
              "<tab>" #'minibuffer-complete         ; common prefix
              "<escape>" #'minibuffer-keyboard-quit ; Close minibuffer
              "C-M-n" #'vertico-next-group
              "C-M-p" #'vertico-previous-group
              "?" #'minibuffer-completion-help
              "M-RET" #'embark-dwim ;; pick some comfortable binding
              "C-<up>" #'other-window
              )
    (:keymaps 'minibuffer-local-map
              "M-h" #'backward-kill-word)
    :custom
    ;; Grow and shrink the Vertico minibuffer
    (vertico-resize t)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (vertico-cycle t)
    :config
    ;; (setq vertico-sort-function 'vertico-sort-alpha)
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    (setq completion-in-region-function
          (lambda (&rest args)
            (apply (if vertico-mode
                       #'consult-completion-in-region
                     #'completion--in-region)
                   args)))
    ;; Prefix the current candidate with “» ”. From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "⮕ " 'face 'vertico-current)
                     "  ")
                   cand))))

#+END_SRC

*** Vertico directory
:PROPERTIES:
:CUSTOM_ID: vertico-directory
:END:

Better typing of file/directory paths

Useful keybindings are:
- ~DEL~ will delete the whole subdirectory or only a character if on a filename
- ~M-DEL~ will delete the whole subdirectory or a word if on a filename

#+BEGIN_SRC emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :general
    (:keymaps 'vertico-map
              "RET" 'vertico-directory-enter
              "<backspace>" 'vertico-directory-delete-char
              "M-<backspace>" 'vertico-directory-delete-word)
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
 #+END_SRC

*** TODO Vertico multiform
:PROPERTIES:
:CUSTOM_ID: vertico-multiform
:END:

This extension allows to choose the way each minibuffer will be displayed.

TODO: Test all the possible minibuffers and customize them as I'd like them to be

#+BEGIN_SRC emacs-lisp
    (use-package vertico-multiform
      :after vertico
      :ensure nil
      :custom
      (vertico-buffer-display-action '(display-buffer-in-side-window
                                       (side . right)
                                       (window-width . 0.3)))
      :config
      ;; Sort directories before files
      (defun sort-characters (characters)
        (sort characters (lambda (name1 name2) (< (char-from-name name1) (char-from-name name2)))))

      ;; Sort directories before files
      (defun sort-directories-first (files)
        (nconc (vertico-sort-alpha (seq-remove (lambda (x) (string-suffix-p "/" x)) files))
               (vertico-sort-alpha (seq-filter (lambda (x) (string-suffix-p "/" x)) files))))

      (vertico-multiform-mode))

    (use-package vertico-posframe
      :ensure t)
#+END_SRC

** [[https://github.com/minad/consult/][Consult]]
:PROPERTIES:
:CUSTOM_ID: consult
:END:

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :ensure-system-package (rg . ripgrep)
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :general
    ;; C-c bindings (mode-specific-map)
    ("C-c h" 'consult-history)
    ("C-c m" 'consult-mode-command)
    ("C-c k" 'consult-kmacro)
    ;; C-x bindings (ctl-x-map)
    ([remap repeat-complex-command] 'consult-complex-command)
    ([remap switch-to-buffer] 'consult-buffer)
    ([remap switch-to-buffer-other-window] 'consult-buffer-other-window)
    ([remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
    ([remap bookmark-jump] 'consult-bookmark)
    ([remap project-switch-to-buffer] 'consult-project-buffer)
    ([remap yank-pop] 'consult-yank-replace)
    ([remap apropos-command] 'consult-apropos)
    ([remap goto-line] 'consult-goto-line)
    ;; ([remap isearch-forward] 'consult-line)
    ;; Custom M-# bindings for fast register access
    ("M-#" 'consult-register-load)
    ("M-'" 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
    ("C-M-#" 'consult-register)
    ;; Other custom bindings
    ("<help> a" 'consult-apropos)            ;; orig. apropos-command
    ;; M-g bindings (goto-map)
    ("M-g e" 'consult-compile-error)
    ("M-g o" 'consult-outline)               ;; Alternative: consult-org-heading
    ("M-g m" 'consult-mark)
    ("M-g k" 'consult-global-mark)
    ("M-g i" 'consult-imenu)
    ("M-g I" 'consult-imenu-multi)
    ;; M-s bindings (search-map)
    ("M-s d" 'consult-find)
    ("M-s D" 'consult-locate)
    ("M-s g" 'consult-grep)
    ("M-s G" 'consult-git-grep)
    ("M-s r" 'consult-ripgrep)
    ("M-s l" 'consult-line)
    ("M-s L" 'consult-line-multi)
    ("M-s m" 'consult-multi-occur)
    ("M-s k" 'consult-keep-lines)
    ("M-s u" 'consult-focus-lines)
    ;; Isearch integration
    ("M-s e" 'consult-isearch-history)
    (:keymaps 'isearch-mode-map
              [remap isearch-edit-string] 'consult-isearch-history
              "M-s L" 'consult-line-multi            ;; needed by consult-line to detect isearch
              )
    ;; Minibuffer history
    (:keymaps 'minibuffer-local-map
              [remap next-matching-history-element] 'consult-history
              [remap prev-matching-history-element] 'consult-history
              )

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; (defun consult-line-repeat ()
    ;;   (interactive)


    (defvar mdrp/consult-line-map
      (let ((map (make-sparse-keymap)))
        (define-key map "\C-s" #'previous-history-element)
        map))

    (consult-customize consult-line :keymap mdrp/consult-line-map)
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key 'any)

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
      ;;;; 2. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
      ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+END_SRC

** [[https://github.com/oantolin/embark][Embark]]
:PROPERTIES:
:CUSTOM_ID: embark
:END:

When using some consult commands (like ~consult-ripgrep~), hitting ~M-RET~ will jump to the result in the corresponding file without closing the minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t
    :general
    ("C-." 'embark-act)          ;; pick some comfortable binding
    ("C-:" 'embark-default-act-noquit)  ;; good alternative: M-.
    ("C-h B" 'embark-bindings)   ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (setq embark-quit-after-action nil)
    (defun embark-default-act-noquit ()
      (interactive)
      (let ((embark-quit-after-action nil))
        (embark-dwim)
        (when-let ((win (minibuffer-selected-window)))
          (select-window win))))

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t
      :after (embark consult)
      :config
      ;; :demand t ; only necessary if you have the hook below
      ;; if you want to have consult previews as you move around an
      ;; auto-updating embark collect buffer
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** [[https://github.com/minad/corfu][Corfu]]
:PROPERTIES:
:CUSTOM_ID: corfu
:END:

#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))
#+END_SRC

** Emacs configuration for minibuffers and completion
:PROPERTIES:
:CUSTOM_ID: emacs-configuration-for-minibuffers-and-completion
:END:

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure t
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

** [[https://github.com/oantolin/orderless][Orderless]]
:PROPERTIES:
:CUSTOM_ID: orderless
:END:

Better completions in minibuffers

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** [[https://github.com/minad/cape][Cape]]
:PROPERTIES:
:CUSTOM_ID: cape
:END:

#+BEGIN_SRC emacs-lisp
  (use-package cape
    :ensure t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    ;; :bind (("C-c p p" . completion-at-point) ;; capf
    ;;        ("C-c p t" . complete-tag)        ;; etags
    ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ("C-c p k" . cape-keyword)
    ;;        ("C-c p s" . cape-symbol)
    ;;        ("C-c p a" . cape-abbrev)
    ;;        ("C-c p i" . cape-ispell)
    ;;        ("C-c p l" . cape-line)
    ;;        ("C-c p w" . cape-dict)
    ;;        ("C-c p \\" . cape-tex)
    ;;        ("C-c p _" . cape-tex)
    ;;        ("C-c p ^" . cape-tex)
    ;;        ("C-c p &" . cape-sgml)
    ;;        ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+END_SRC

** [[https://github.com/emacs-straight/marginalia][Marginalia]]
:PROPERTIES:
:CUSTOM_ID: marginalia
:END:

Useful informations added in the minibuffer options

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

** [[https://github.com/victorhge/iedit][Iedit]]
:PROPERTIES:
:CUSTOM_ID: iedit
:END:

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :general
    (:keymaps 'lsp-mode-map
              "C-;" nil))
#+END_SRC

** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
:PROPERTIES:
:CUSTOM_ID: yasnippet
:END:

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC

*** [[https://github.com/mohkale/consult-yasnippet][Consult Yasnippet]]
:PROPERTIES:
:CUSTOM_ID: consult-yasnippet
:END:

#+BEGIN_SRC emacs-lisp
  (use-package consult-yasnippet
    :ensure t
    :general
    ("C-<" 'consult-yasnippet))
#+END_SRC

** [[https://github.com/company-mode/company-mode][Company]]
:PROPERTIES:
:CUSTOM_ID: company
:END:

Text completion framework.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook ((prog-mode . company-mode)
           (org-mode . company-mode))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0)
    :general
    (:keymaps 'company-active-map
              "<tab>" 'company-complete-selection)
    :config
    (defun mdrp/disable-automatic-company ()
      (interactive)
      (setq company-idle-delay nil))

    (defun mdrp/enable-automatic-company (i)
      (interactive "nIdle-delay: ")
      (setq-local company-idle-delay i))

    (defun add-pcomplete-to-capf ()
      (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))

    (add-hook 'org-mode-hook #'add-pcomplete-to-capf)

    (setq company-minimum-prefix-length 1
          company-show-numbers ''left
          company-tooltip-align-annotations t
          company-require-match 'never)

    (add-to-list 'company-backends '(company-capf
                                     company-yasnippet
                                     company-files))
    (global-company-mode 1))
#+END_SRC

** TODO [[https://github.com/mohkale/consult-company][Consult Company]]
:PROPERTIES:
:CUSTOM_ID: consult-company
:END:

Not satisfied currently.

#+BEGIN_SRC emacs-lisp
  (use-package consult-company
    :load-path "lisp/consult-company/"
    :disabled
    :config
    (defun company-complete-common ()
      (interactive)
      (consult-company)))
    ;; :general
    ;; ([remap completion-at-point] #'consult-company))

#+END_SRC

** [[https://github.com/company-mode/company-quickhelp][Company Quickhelp]]
:PROPERTIES:
:CUSTOM_ID: company-quickhelp
:END:

Display documentation for the current candidate.

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :after company
    :hook (company-mode . company-quickhelp-mode)
    :general
    (:keymaps 'company-active-map
              "C-c h" 'company-quickhelp-manual-begin
              "M-h"   'company-quickhelp-manual-begin)
    :config
    (setq company-quickhelp-delay 0)
    (company-quickhelp-mode 1)
    )
#+END_SRC

*** [[https://github.com/vspinu/company-math][Company math]]
:PROPERTIES:
:CUSTOM_ID: company-math
:END:

Company for LaTeX math mode.

# #+BEGIN_SRC emacs-lisp
#   (use-package company-math
#     :ensure t
#     ;; :preface
#     ;; (autoload 'company-math-symbols-latex "company-math")
#     ;; (autoload 'company-latex-commands "company-math")
#     :hook
#     (TeX-mode . (lambda ()
#                   (setq-local company-backends '((company-math-symbols-latex
#                                                   company-latex-commands
#                                                   company-capf)))))
#     (TeX-mode . my/latex-mode-setup)
#     :config
#     (defun my/latex-mode-setup ()
#       (setq-local company-backends
#                   (append '((company-math-symbols-latex company-latex-commands))
#                           company-backends)))
#     )
# #+END_SRC

*** [[https://github.com/osv/company-web][Company web]]
:PROPERTIES:
:CUSTOM_ID: company-web
:END:

#+BEGIN_SRC emacs-lisp
  (use-package company-web
    :ensure t
    :preface
    (autoload 'company-web-html "company-web-html")
    (autoload 'company-web-jade "company-web-jade")
    (autoload 'company-web-slim "company-web-slim")
    :hook ((web-mode . (lambda ()
                         (setq-local company-backends '(company-web-html
                                                        company-web-jade
                                                        company-web-slim
                                                        company-capf))))))
#+END_SRC

*** [[https://github.com/sebastiencs/company-box][Company box]]
:PROPERTIES:
:CUSTOM_ID: company-box
:END:

Nice icons for company instead of the default behaviour.

#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :ensure t
    :diminish
    :if (display-graphic-p)
    :defines company-box-icons-all-the-icons
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-backends-colors nil)
    :config
    (with-no-warnings
      ;; Prettify icons
      (defun my-company-box-icons--elisp (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))
      (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

    (when (and (display-graphic-p)
               (require 'all-the-icons nil t))
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
              (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
              (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
              (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
              (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
              (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
              (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
              (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
              (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
              (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
              (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
              (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
              (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
              (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
              (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
              (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
              (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
              (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
              (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
              (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
              (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
              (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
              (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
              (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
              (Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
            company-box-icons-alist 'company-box-icons-all-the-icons)))
#+END_SRC

*** [[https://github.com/radian-software/prescient.el][Company prescient]]
:PROPERTIES:
:CUSTOM_ID: company-prescient
:END:

Better sorting of company candidates using prescient.

#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
      :ensure t
      :after company
      :config
      (company-prescient-mode 1))
#+END_SRC

* GUI
:PROPERTIES:
:CUSTOM_ID: gui
:END:
** Themes etc
:PROPERTIES:
:CUSTOM_ID: themes-etc
:END:

*** [[https://github.com/doomemacs/themes][Doom theme]]
:PROPERTIES:
:CUSTOM_ID: doom-theme
:END:

Nice themes that can be previewed [[https://github.com/doomemacs/themes/tree/screenshots][here]].

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (load-theme doom-theme t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
#+END_SRC

** Mode-line
:PROPERTIES:
:CUSTOM_ID: mode-line
:END:

*** [[https://github.com/emacsorphanage/anzu][Anzu]]
:PROPERTIES:
:CUSTOM_ID: anzu
:END:

Displays a counter in the mode-line when searching or query replacing.

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :init
    (global-anzu-mode +1)
    (anzu-mode +1)
    :config
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
    (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp))
#+END_SRC

*** [[https://github.com/seagle0128/doom-modeline][Doom modeline]]
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:

This mode allows to customize entirely the emacs mode-line. Two mode-lines are defined here, one when lsp-mode is active and one when it isn't since lsp-mode already displays informations that would be redundant with the default mode-line.

Read the comments in the code if you want to understand its configuration.

Some customization is available from [[file:custom.el][custom.el]], mainly ~doom-modeline-bar-width~ and ~doom-modeline-height~.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)
    :custom

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (doom-modeline-hud nil)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be
    ;; displayed. It can be an integer or a float number. `nil' means no limit."
    (doom-modeline-window-width-limit nil)

    ;; How to detect the project root.
    ;; nil means to use `default-directory'.
    ;; The project management packages have some issues on detecting project root.
    ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
    ;; to hanle sub-projects.
    ;; You can specify one if you encounter the issue.
    (doom-modeline-project-detection 'projectile)

    ;; Determines the style used by `doom-modeline-buffer-file-name'.
    ;;
    ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   auto => emacs/l/comint.el (in a project) or comint.el
    ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
    ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
    ;;   truncate-with-project => emacs/l/comint.el
    ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
    ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
    ;;   truncate-all => ~/P/F/e/l/comint.el
    ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   relative-from-project => emacs/lisp/comint.el
    ;;   relative-to-project => lisp/comint.el
    ;;   file-name => comint.el
    ;;   buffer-name => comint.el<2> (uniquify buffer name)
    ;;
    ;; If you are experiencing the laggy issue, especially while editing remote files
    ;; with tramp, please try `file-name' style.
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (doom-modeline-buffer-file-name-style 'truncate-all)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (doom-modeline-icon t)

    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)

    ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
    (doom-modeline-buffer-state-icon t)

    ;; Whether display the modification icon for the buffer.
    ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
    (doom-modeline-buffer-modification-icon t)

    ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
    (doom-modeline-unicode-fallback t)

    ;; Major modes in which to display word count continuously.
    ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
    ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
    ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
    (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

    ;; If non-nil, only display one number for checker information if applicable.
    (doom-modeline-checker-simple-format nil)

    ;; The maximum number displayed for notifications.
    (doom-modeline-number-limit 99)

    ;; The maximum displayed length of the branch name of version control.
    (doom-modeline-vcs-max-length 12)

    ;; Whether display the minions minor mode
    (doom-modeline-minor-modes t)

    ;; Whether display the GitHub notifications. It requires `ghub' package.
    (doom-modeline-github t)

    ;; The interval of checking GitHub.
    (doom-modeline-github-interval 30)

    ;; Whether display the environment version.
    (doom-modeline-env-version t)
    ;; Or for individual languages
    (doom-modeline-env-enable-python t)
    (doom-modeline-env-enable-ruby t)
    (doom-modeline-env-enable-perl t)
    (doom-modeline-env-enable-go t)
    (doom-modeline-env-enable-elixir t)
    (doom-modeline-env-enable-rust t)

    ;; Change the executables to use for the language version string
    (doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
    (doom-modeline-env-ruby-executable "ruby")
    (doom-modeline-env-perl-executable "perl")
    (doom-modeline-env-go-executable "go")
    (doom-modeline-env-elixir-executable "iex")
    (doom-modeline-env-rust-executable "rustc")

    ;; What to display as the version while a new one is being loaded
    (doom-modeline-env-load-string "...")


    :config
    ;; Define your custom doom-modeline
    (doom-modeline-def-modeline 'mdrp/no-lsp-line
                                '(bar " " matches follow buffer-info modals remote-host buffer-position word-count parrot selection-info)
                                '(misc-info persp-name battery grip github debug minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

    (doom-modeline-def-modeline 'mdrp/lsp-line
                                '(bar " " matches follow lsp modals remote-host buffer-position word-count parrot selection-info)
                                '(misc-info persp-name battery grip github debug minor-modes input-method indent-info buffer-encoding major-mode process vcs checker))

    ;; TEMP: Emacs 29 adds position to symbols after using doom-modeline-def-modeline.
    (setq doom-modeline-fn-alist
          (unless (version< emacs-version "29")
            (--map
             (cons (remove-pos-from-symbol (car it)) (cdr it))
             doom-modeline-fn-alist)
          doom-modeline-fn-alist))

    ;; Add to `doom-modeline-mode-hook` or other hooks
    (defun mdrp/setup-no-lsp-doom-modeline ()
      (message "doom no lsp modeline change")
      (doom-modeline-set-modeline 'mdrp/no-lsp-line 'default))

    (defun mdrp/setup-lsp-doom-modeline ()
      (message "doom lsp modeline change")
      (doom-modeline-set-modeline 'mdrp/lsp-line nil))

    (add-hook 'doom-modeline-mode-hook 'mdrp/setup-no-lsp-doom-modeline)
    (add-hook 'lsp-mode-hook 'mdrp/setup-lsp-doom-modeline)
    (message "doom modeline loaded")
    (doom-modeline-mode))
#+END_SRC

*** [[https://github.com/tarsius/minions][Minions]]
:PROPERTIES:
:CUSTOM_ID: minions
:END:

Implements a menu that lists enabled and disabled minor modes in the mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :ensure t
    :config (minions-mode)
    :custom
    (minions-mode-line-lighter "☰")
    ;; :general
    ;; (:keymaps 'minions-mode-line-minor-modes-map
    ;;           "<mode-line> <mouse-1>" 'minions-minor-modes-menu)
    )
#+END_SRC

** [[https://www.emacswiki.org/emacs/OutlineMinorMode][Outline]] (major and minor modes)
:PROPERTIES:
:CUSTOM_ID: outline-major-and-minor-modes
:END:

*** Major mode
:PROPERTIES:
:CUSTOM_ID: major-mode
:END:

#+BEGIN_SRC emacs-lisp
  (use-package outline
    :config
    (define-prefix-command 'cm-map nil "Outline-")
    (set-display-table-slot standard-display-table
                            'selective-display
                            (string-to-vector "+++"))
    :general
    ("C-o" 'cm-map)
    (:keymaps 'cm-map
              ;; HIDE
              "q" '(outline-hide-sublevels :which-key "Hide everything but the top-level headings")
              "t" '(outline-hide-body :which-key "Hide everything but headings (all body lines")
              "o" '(outline-hide-other :which-key "Hide other branche")
              "c" '(outline-hide-entry :which-key "Hide this entry's bod")
              "l" '(outline-hide-leaves :which-key "Hide body lines in this entry and sub-entrie")
              "d" '(outline-hide-subtree :which-key "Hide everything in this entry and sub-entrie")
              ;; SHOW
              "a" '(outline-show-all :which-key "Show (expand) everythin")
              "e" '(outline-show-entry :which-key "Show this heading's bod")
              "i" '(outline-show-children :which-key "Show this heading's immediate child sub-heading")
              "k" '(outline-show-branches :which-key "Show all sub-headings under this headin")
              "s" '(outline-show-subtree :which-key "Show (expand) everything in this heading & belo")
              ;; MOVE
              "u" '(outline-up-heading :which-key "U")
              "n" '(outline-next-visible-heading :which-key "Nex")
              "p" '(outline-previous-visible-heading :which-key "Previou")
              "f" '(outline-forward-same-level :which-key "Forward - same leve")
              "b" '(outline-backward-same-level :which-key "Backward - same leve")
              )
    )
#+END_SRC

*** Minor mode
:PROPERTIES:
:CUSTOM_ID: minor-mode
:END:

#+BEGIN_SRC emacs-lisp
  (use-package outline-minor
    :ensure nil
    :hook (prog-mode . outline-minor-mode)
  )
#+END_SRC

*** TODO [[https://github.com/alphapapa/outshine][Outshine]]
:PROPERTIES:
:CUSTOM_ID: outshine
:END:

Bring org mode to non org files.

To declare a heading just add one or more ~*~ in a comment start:
- OCaml : ~(* * Heading 1 *)~, ~(* ** Heading 2 *)~, ...
- Python: ~#  Heading 1*~, ~# ** Heading 2~, ...
- etc

TODO: To be coherent with ~odoc~, for example, I need to update outline regexps to handle OCaml headings.

#+BEGIN_SRC emacs-lisp
  (use-package outshine
    :ensure t
    :init (defvar outline-minor-mode-prefix "\C-o")
    :hook (outline-minor-mode . outshine-mode)
    :config
    (setq outshine-preserve-delimiter-whitespace nil)
    )
#+END_SRC

*** Pretty outlines
:PROPERTIES:
:CUSTOM_ID: pretty-outlines
:END:

Nice bullets for outshine.

#+BEGIN_SRC emacs-lisp
(use-package pretty-outlines
  :defer t
  :load-path "lisp/"
  :hook (
         (outline-mode . pretty-outlines-set-display-table)
         (outline-minor-mode . pretty-outlines-set-display-table)
         (emacs-lisp-mode . pretty-outlines-add-bullets)
         )
  )
#+END_SRC

** [[https://github.com/emacsmirror/rainbow-mode][Rainbow mode]]
:PROPERTIES:
:CUSTOM_ID: rainbow-mode
:END:

Display colors with a background corresponding to the color

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook (help-mode prog-mode text-mode org-mode)
    )
#+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]]
:PROPERTIES:
:CUSTOM_ID: rainbow-delimiters
:END:

Different colours for different depths of parentheses, brackets etc

#+BEGIN_SRC emacs-lisp
  (if use-rainbow
      (use-package rainbow-delimiters
        :ensure t
        :hook (prog-mode . rainbow-delimiters-mode)))
#+END_SRC

** [[https://github.com/protesilaos/pulsar][Pulsar]]
:PROPERTIES:
:CUSTOM_ID: pulsar
:END:

Will pulse when the focus changes to show where the cursor is.

#+BEGIN_SRC emacs-lisp
  (use-package pulsar
    :ensure t
    :config
    (setq pulsar-pulse-functions
          '(recenter-top-bottom
            move-to-window-line-top-bottom
            reposition-window
            forward-page
            backward-page
            scroll-up-command
            scroll-down-command
            org-next-visible-heading
            org-previous-visible-heading
            org-forward-heading-same-level
            org-backward-heading-same-level
            outline-backward-same-level
            outline-forward-same-level
            outline-next-visible-heading
            outline-previous-visible-heading
            outline-up-heading
            ))

    (setq pulsar-pulse-on-window-change t)
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-magenta)
    (setq pulsar-highlight-face 'pulsar-yellow)
    (pulsar-global-mode 1)
    :defer t
    )
#+END_SRC

** [[https://github.com/hlissner/emacs-solaire-mode][Solaire]]
:PROPERTIES:
:CUSTOM_ID: solaire
:END:

#+BEGIN_SRC emacs-lisp
  (when use-solaire
    (use-package solaire-mode
      :ensure t
      :config
      (solaire-global-mode +1)))
#+END_SRC

** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
:PROPERTIES:
:CUSTOM_ID: dashboard
:END:

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; Set the title
    (setq dashboard-banner-logo-title "Pokemacs")
    ;; Set the banner
    (setq dashboard-startup-banner "~/.emacs.d/etc/dashboard/calvin_hobbes.jpeg")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-set-navigator t)
    (setq dashboard-set-footer nil)
    (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (setq dashboard-week-agenda t))
#+END_SRC

** TODO SVG Tags
:PROPERTIES:
:CUSTOM_ID: svg-tags
:END:

#+BEGIN_SRC emacs-lisp
  (use-package svg-tag-mode
    :disabled
    :ensure t
    :config
    (setq svg-tag-tags
          '((":TODO:" . ((lambda (tag)
                           (svg-tag-make "TODO" :face 'org-tag
                                         :radius 0 :inverse t :margin 0))))
            (":NOTE:" . ((lambda (tag)
                           (svg-tag-make "NOTE" :face 'font-lock-comment-face
                                         :inverse nil :margin 0 :radius 0))))
            ("\([0-9a-zA-Z]\)" . ((lambda (tag)
                                    (svg-tag-make tag :beg 1 :end -1 :radius 12))))
            ("\([0-9a-zA-Z][0-9a-zA-Z]\)" . ((lambda (tag)
                                               (svg-tag-make tag :beg 1 :end -1 :radius 8))))))
    (svg-tag-mode)
    (global-svg-tag-mode))

#+END_SRC

* [[https://github.com/emacs-eaf/emacs-application-framework][EAF]]
:PROPERTIES:
:CUSTOM_ID: eaf
:END:

#+BEGIN_SRC elisp
  (when use-eaf
    (use-package eaf
      :load-path "lisp/emacs-application-framework"
      :ensure nil
      :custom
      ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
      (eaf-browser-continue-where-left-off t)
      (eaf-browser-enable-adblocker t)
      (browse-url-browser-function 'eaf-open-browser)
      (eaf-browser-default-search-engine "duckduckgo")
      :config
      (use-package eaf-all-the-icons)
      (use-package eaf-org)
      (use-package eaf-browser)
      (use-package eaf-pdf-viewer)
      (use-package eaf-system-monitor)
      (use-package eaf-image-viewer)
      (use-package eaf-markdown-previewer)
      (use-package eaf-org-previewer)
      (use-package eaf-demo)

      (defalias 'browse-web #'eaf-open-browser)
      (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
      (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
      (eaf-bind-key nil "M-q" eaf-browser-keybinding))) ;; unbind, see more in the Wiki
#+END_SRC

* [[https://orgmode.org/][Org mode]]
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

Org mode is, well, org mode.

** Main mode
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)

  (use-package mixed-pitch :ensure t)

  (use-package org
    :ensure t
    :hook (org-mode . mixed-pitch-mode)
    :init
    (setq org-list-allow-alphabetical t)
    ;; If you don't want the agenda in french you can comment the following
    ;; expression. You can even set it to your preferred language
    ;; https://www.emacswiki.org/emacs/CalendarLocalization#toc16
    (setq calendar-week-start-day 1
          calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                   "Jeudi" "Vendredi" "Samedi"]
          calendar-month-name-array ["Janvier" "Février" "Mars" "Avril" "Mai"
                                     "Juin" "Juillet" "Août" "Septembre"
                                     "Octobre" "Novembre" "Décembre"])

    (defun mdrp/org-compile-latex-and-update-other-buffer ()
      "Has as a premise that it's run from an org-mode buffer and the
          other buffer already has the PDF open"
      (interactive)
      (org-latex-export-to-pdf)
      (mdrp/update-other-buffer)
      )
    (defun mdrp/filter-timestamp (trans back _comm)
      "Remove <> around time-stamps."
      (pcase back
        (`html
         (replace-regexp-in-string "&[lg]t;" "" trans))
        (`latex
         (replace-regexp-in-string "[<>]" "" trans))))
    :custom
    (org-directory "~/org/")
    ;; Babel
    (org-confirm-babel-evaluate nil)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    ;; Rest
    (org-display-custom-times t)
    (org-time-stamp-custom-formats '("<%d %b %Y>" . "<%d/%d/%y %a %H:%M>"))
    (org-agenda-files
     '("/home/mattias/org/agenda.org" "/home/mattias/org/cduce.org" "/home/mattias/org/orgzly.org") nil nil "Customized with use-package org")
    (org-ellipsis " ▾")
    (org-adapt-indentation nil)
    (org-agenda-span 'week)
    (org-agenda-start-day "1d")
    (org-agenda-start-on-weekday nil)
    (org-agenda-start-with-log-mode t)
    (org-cycle-separator-lines -1)
    (org-fontify-done-headline t)
    (org-footnote-auto-adjust t)
    (org-hide-emphasis-markers t)
    (org-hide-leading-stars t)
    (org-hide-macro-markers t)
    (org-image-actual-width '(300))
    (org-latex-compiler "latexmk")
    (org-log-done 'time)
    (org-odd-levels-only t)
    (org-pretty-entities t)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-startup-truncated nil)
    (org-startup-with-inline-images t)
    (org-support-shift-select 'always)
    (org-roam-v2-ack t) ; anonying startup message
    (org-tag-persistent-alist
     '((:startgroup . nil)
       ("Maison" . ?h)
       ("Boulot" . ?b)
       ("Plaisir" . ?p)
       (:endgroup . nil)
       (:startgroup . nil)
       ("Usuba" . ?u)
       ("Ocaml" . ?o)
       ("Reste" . ?r)
       (:endgroup . nil)
       (:startgroup . nil)
       ("Facile" . ?f)
       ("Moyen" . ?m)
       ("Difficile" . ?d)
       (:endgroup . nil)
       )
     )
    (org-tag-faces
     '(
       ("Maison" . (:foreground "GoldenRod" :weight bold))
       ("Plaisir" . (:foreground "GoldenRod" :weight bold))
       ("Boulot" . (:foreground "GoldenRod" :weight bold))
       ("Usuba" . (:foreground "IndianRed1" :weight bold))
       ("OCaml" . (:foreground "IndianRed1" :weight bold))
       ("Reste" . (:foreground "IndianRed1" :weight bold))
       ("Facile" . (:foreground "OrangeRed" :weight bold))
       ("Moyen" . (:foreground "OrangeRed" :weight bold))
       ("Difficile" . (:foreground "OrangeRed" :weight bold))
       )
     )
    :bind-keymap ("M-o" . mdrp-org-map)
    :bind (
           ("C-x C-p" . mdrp/org-compile-latex-and-update-other-buffer)
           (:map mdrp-org-map
                 ("l"                       . org-store-link)
                 ("a"                       . org-agenda)
                 ("c"                       . org-capture)
                 )
           (:map org-mode-map
                 ("M-j"                     . org-goto)
                 )
           )

    :config
    ;; TODO states
    (setq org-todo-keywords
          '((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "VERIFYING(v!)" "BLOCKED(b@)"  "|" "DONE(d!)" "OBE(o@!)" "WONT-DO(w@/!)" )
            ))
    (define-prefix-command 'mdrp-org-map nil "Org-")
    (defun transform-square-brackets-to-round-ones(string-to-transform)
      "Transforms [ into ( and ] into ), other chars left unchanged."
      (concat
       (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
      )
    (customize-set-value 'org-latex-with-hyperref nil)
    (add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hyphens}{url}")
    (add-to-list 'org-export-filter-timestamp-functions #'mdrp/filter-timestamp)
    (setq org-image-actual-width nil)
    (defun org-mode-<>-syntax-fix (start end)
      "Change syntax of characters ?< and ?> to symbol within source code blocks."
      (let ((case-fold-search t))
        (when (eq major-mode 'org-mode)
          (save-excursion
            (goto-char start)
            (while (re-search-forward "<\\|>" end t)
              (when (save-excursion
                      (and
                       (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
                       (string-equal (downcase (match-string 1)) "begin")))
                ;; This is a < or > in an org-src block
                (put-text-property (point) (1- (point))
                                   'syntax-table (string-to-syntax "_"))))))))

    (defun org-setup-<>-syntax-fix ()
      "Setup for characters ?< and ?> in source code blocks.
       Add this function to `org-mode-hook'."
      (setq syntax-propertize-function 'org-mode-<>-syntax-fix)
      (syntax-propertize (point-max)))

    (add-hook 'org-mod-hook #'org-setup-<>-syntax-fix)

    (setq org-agenda-custom-commands
          '(("r" "Rendez-vous" agenda* "Rendez-vous du mois"
             ((org-agenda-span 'month)
              (org-agenda-show-all-dates nil)
              ))))
    (calendar-set-date-style 'iso)
    (use-package ob-rust :ensure t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (rust . t)
       (ocaml . t)
       (latex . t)
       (shell . t)
       ))
    (add-hook 'org-mode-hook
              (lambda ()
                (push '("- [ ]" . "") prettify-symbols-alist)
                (push '("+ [ ]" . "") prettify-symbols-alist)
                (push '("* [ ]" . "") prettify-symbols-alist)
                (push '("- [X]" . "") prettify-symbols-alist)
                (push '("+ [X]" . "") prettify-symbols-alist)
                (push '("* [X]" . "") prettify-symbols-alist)
                (push '("- [-]" . "") prettify-symbols-alist)
                (push '("+ [-]" . "") prettify-symbols-alist)
                (push '("* [-]" . "") prettify-symbols-alist)
                (prettify-symbols-mode)
                ))
    (setq org-capture-templates
          `(
            ("t" "Task" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
             "* TODO %?\n  %u\n  %a")
            ("s" "Scheduled" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
             "* TODO %?\n SCHEDULED: %^t \n %a")
            ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
             "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
            ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
             "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
            ))
    (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-document-title ((t (:inherit variable-pitch :height 1.4 :weight bold :foreground "#c678dd"))))
     '(org-level-1 ((t (:inherit variable-pitch :height 1.7 :weight bold :foreground "#51afef"))))
     '(org-level-2 ((t (:inherit variable-pitch :height 1.4 :weight bold :foreground "#c678dd"))))
     '(org-level-3 ((t (:inherit variable-pitch :height 1.2 :weight bold :foreground "#a9a1e1"))))
     '(org-level-4 ((t (:inherit variable-pitch :height 1.1 :weight bold :foreground "#7cc3f3"))))
     '(org-level-5 ((t (:inherit variable-pitch :height 1.0 :weight bold))))
     '(org-level-6 ((t (:inherit variable-pitch :height 1.0 :weight bold))))
     '(org-level-7 ((t (:inherit variable-pitch :height 1.0 :weight bold))))
     '(org-level-8 ((t (:inherit variable-pitch :height 1.0 :weight bold))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
     ;; (let ((re "\\}\\(+\\|-\\) "))
     ;;   (font-lock-add-keywords
     ;;     'org-mode
     ;;     `((,(concat "^[[:space:]]\\{" (number-to-string (+ 0 org-list-indent-offset)) re)
     ;;        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

     ;;    (font-lock-add-keywords
     ;;     'org-mode
     ;;     `((,(concat "^[[:space:]]\\{" (number-to-string (+ 2 org-list-indent-offset)) re)
     ;;        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◆"))))))

     ;;    (font-lock-add-keywords
     ;;     'org-mode
     ;;     `((,(concat "^[[:space:]]\\{" (number-to-string
     ;;                                    (* 2 (+ 2 org-list-indent-offset))) re)
     ;;        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◇"))))))
     ;;    (font-lock-add-keywords
     ;;     'org-mode
     ;;     `((,(concat "^[[:space:]]\\{" (number-to-string
     ;;                                    (* 3 (+ 2 org-list-indent-offset))) re)
     ;;        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◼"))))))
     ;;    )
     )
    )
#+END_SRC


** [[https://github.com/yilkalargaw/org-auto-tangle][Org auto tangle]]
:PROPERTIES:
:CUSTOM_ID: org-auto-tangle
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+END_SRC

** [[https://github.com/jkitchin/org-ref][Org ref]]
:PROPERTIES:
:CUSTOM_ID: org-ref
:END:
:PROPERTIES:

Not using it anymore since I don't write articles but it may be useful

:CUSTOM_ID: org-ref
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :disabled
    :ensure t
    :after org
    :init
    (setq
     org-ref-completion-library 'org-ref-ivy-cite
     )
    ;; :custom
    ;; (org-latex-pdf-process (list "latexmk -xelatex -shell-escape -bibtex -f -pdf %f"))
    )
#+END_SRC

** [[https://github.com/sabof/org-bullets][Org bullets]]
:PROPERTIES:
:CUSTOM_ID: org-bullets
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("" "" "" "" "" "" ""))
    )
#+END_SRC

** [[https://github.com/shg/org-inline-pdf.el][Org inline pdf]]
:PROPERTIES:
:CUSTOM_ID: org-inline-pdf
:END:

See pdf inlined when included in org files.

#+BEGIN_SRC emacs-lisp
  (use-package org-inline-pdf
    :ensure t
    :hook (org-mode . org-inline-pdf-mode)
    )
#+END_SRC

** [[https://github.com/kiwanami/emacs-calfw][Calfw]]
:PROPERTIES:
:CUSTOM_ID: calfw
:END:

Calendar view in emacs buffer.

#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :ensure t
    :config
    (setq cfw:org-overwrite-default-keybinding t)
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓)
    )
#+END_SRC

** [[https://github.com/kiwanami/emacs-calfw][Calfw org]]
:PROPERTIES:
:CUSTOM_ID: calfw-org
:END:

This package allows to see the org calendar and adds a capture template for scheduling.

#+BEGIN_SRC emacs-lisp
  (use-package calfw-org
    :ensure t
    :after calfw
    :init
    (define-prefix-command 'mdrp-calfw-map nil "Cal-")
    :config
    (defun cfw:org-capture-day ()
      (with-current-buffer  (get-buffer-create cfw:calendar-buffer-name)
        (let ((pos (cfw:cursor-to-nearest-date)))
          (concat "<"
                  (format-time-string  "%Y-%m-%d %a 09:00"
                                       (encode-time 0 0 0
                                                    (calendar-extract-day pos)
                                                    (calendar-extract-month pos)
                                                    (calendar-extract-year pos)))
                  ">"))))
    :general
    ("M-c" 'mdrp-calfw-map)
    (:keymaps 'mdrp-calfw-map
              "c" 'cfw:open-calendar-buffer
              "o" 'cfw:open-org-calendar
              )
    (:keymaps 'cfw:calendar-mode-map
              "RET" 'cfw:org-open-agenda-day)
    :custom
    (cfw:org-capture-template
     `("c" "calfw2org" entry (file+headline ,(concat org-directory "agenda.org") "Calendrier")
       "* %?\nSCHEDULED: %(cfw:org-capture-day)" :empty-lines 1)
     )
    )

#+END_SRC

** DISABLED: [[https://github.com/myuhe/org-gcal.el][Org gcal]]
:PROPERTIES:
:CUSTOM_ID: disabled-org-gcal
:END:

If I have to reuse a Google calendar I may enable this package again but I don't need it right now.

#+BEGIN_SRC emacs-lisp
  ;; The request can be wrong depending on Google updates, evaluate this:
  ;; (concat org-gcal-auth-url
  ;;         "?client_id=" (url-hexify-string org-gcal-client-id)
  ;;         "&response_type=code"
  ;;         "&redirect_uri=" (url-hexify-string "urn:ietf:wg:oauth:2.0:oob")
  ;;         "&scope=" (url-hexify-string org-gcal-resource-url))

  (use-package org-gcal
    :disabled
    :custom
    (org-gcal-client-id (get-secrets-config-value 'org-gcal-client-id))
    (org-gcal-client-secret (get-secrets-config-value 'org-gcal-client-secret))
    (org-gcal-fetch-file-alist
     `(
       (,(get-secrets-config-value 'calendar-company) . "~/org/calendar_company.org")
       (,(get-secrets-config-value 'calendar-user) . "~/org/calendar_user.org")
       )
     )
    )
#+END_SRC

** [[https://github.com/alphapapa/org-super-agenda][Org super agenda]]
:PROPERTIES:
:CUSTOM_ID: org-super-agenda
:END:

Better agenda view for ~org-agenda~

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :config
    (setq org-super-agenda-groups
          '(;; Each group has an implicit Boolean OR operator between its selectors.
            (:name "Rendez-vous"  ; Optionally specify section name
                   :time-grid t  ; Items that appear on the time grid
                   )
            ;; After the last group, the agenda will display items that didn't
            ;; match any of these groups, with the default order position of 99
            ))
    (org-super-agenda-mode)
    (when use-org-agenda-startup (org-agenda nil "a"))
    )
#+END_SRC

** [[https://github.com/awth13/org-appear][Org appear]]
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:

Like unprettify at point but for org invisible elements (links etc)

#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t)
    )
#+END_SRC

** [[https://github.com/org-roam/org-roam][Org roam]]
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:

The next package I need to use fully, just starting right now.

#+BEGIN_SRC emacs-lisp
  (when use-org-roam
    (use-package org-roam
      :ensure t
      :after org
      :custom
      (org-roam-directory (file-truename "~/org/org-roam"))
      :general
      (:keymaps 'mdrp-org-map
                "r" 'org-roam-buffer-toggle
                "f" 'org-roam-node-find
                "g" 'org-roam-graph
                "i" 'org-roam-node-insert
                "c" 'org-roam-capture
                ;; Dailies
                "j" 'org-roam-dailies-capture-today)
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol)))
#+END_SRC

** [[https://github.com/alphapapa/org-make-toc][Org make toc]]
:PROPERTIES:
:CUSTOM_ID: org-make-toc
:END:

Helper to create table of contents in org files.

#+BEGIN_SRC emacs-lisp
  (use-package org-make-toc
    :ensure t
    :custom
    (org-make-toc-insert-custom-ids t))
#+END_SRC

** [[https://gitlab.com/Titan-C/org-cv][Org CV]]
:PROPERTIES:
:CUSTOM_ID: org-cv
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ox-moderncv
    :load-path "lisp/org-cv/"
    :init
    (require 'ox-moderncv)
    :config
    (require 'ox-awesomecv))
#+END_SRC

* Mail, gpg et al
:PROPERTIES:
:CUSTOM_ID: mail-gpg-et-al
:END:

*** [[http://elpa.gnu.org/packages/pinentry.html][Pinentry]]
:PROPERTIES:
:CUSTOM_ID: pinentry
:END:

#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :ensure t
    :config

    (setf epa-pinentry-mode 'loopback)
    (pinentry-start)
    ;; Start GPG agent with SSH support
    (shell-command "gpg-connect-agent /bye")
    )
#+END_SRC

*** Mu4e
:PROPERTIES:
:CUSTOM_ID: mu4e
:END:

Based on this [[https://macowners.club/posts/email-emacs-mu4e-macos/#setup-msmtp-for-sending][tutorial]].

- Create directories for your mails
    #+BEGIN_SRC shell
      .maildir
      ├── acc1
      ├── acc2
      └── acc3
    #+END_SRC
- Install [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][mu4e]] from the latest release.
- Fill a ~.mbsyncrc~ with the following fields (for each account):
    #+BEGIN_SRC shell
      IMAPAccount acc
      Host imap.mail.me.com
      User imap-user
      PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/mu4e/.mbsyncpass-acc.gpg"
      Port 993
      SSLType IMAPS
      SSLVersions TLSv1.2
      AuthMechs PLAIN
      SystemCertificates no
      CertificateFile /etc/ssl/certs/ca-certificates.crt

      IMAPStore acc-remote
      Account acc

      MaildirStore acc-local
      SubFolders Verbatim
      Path ~/.maildir/acc/
      Inbox ~/.maildir/acc/INBOX

      Channel acc
      Far :acc-remote:
      Near :acc-local:
      Patterns *
      Create Near
      Sync All
      Expunge Both
      SyncState *
    #+END_SRC

- To create ~.mbsyncpass-acc.gpg~ store your password in ~.mbsyncpass-acc~ and encrypt with ~gpg2 -c .mbsyncpass-acc~ before removing the original file.
- Synchronise all your mails with ~mbsync -aV~
- Initialise ~mu4e~ with
    #+BEGIN_SRC shell
      mu init -m ~/.maildir \
         --my-address dummy@icloud.com \
         --my-address dummy@gmail.com \
         --my-address dummy@example.com
    #+END_SRC
- Create the index with ~mu index~
- Fill a ~.mbsyncrc~ with the following fields (for each account):
    #+BEGIN_SRC shell
      # Set default values for all the accounts.
      defaults
      logfile ~/.maildir/msmtp.log
      tls_trust_file /etc/ssl/certs/ca-certificates.crt

      # ======================================================================

      account acc
      auth on
      host smtp.mail.me.com
      port 465
      protocol smtp
      from smtp-login@acc.com
      user smtp-login
      passwordeval "gpg2 -q --for-your-eyes-only --no-tty -d ~/mu4e/.mbsyncpass-acc.gpg"
      tls on
      tls_starttls off
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when use-mu4e
    (use-package smtpmail
      :ensure t
      :ensure-system-package msmtp)

    (load-file (expand-file-name "~/mu4e/mu4e.el")))
#+END_SRC

* [[https://github.com/emacs-lsp/lsp-mode/][LSP]]
:PROPERTIES:
:CUSTOM_ID: lsp
:END:

Minor mode acting as a client between a language server protocol and emacs.

** Main mode
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (
           (tuareg-mode . lsp-deferred)
           (caml-mode . lsp-deferred)
           (elm-mode . lsp-deferred)
           (rustic-mode . lsp-deferred)
           (conf-toml-mode . lsp-deferred)
           (kotlin-mode . lsp-deferred)
           (fsharp-mode . lsp-deferred)
           (python-mode . lsp-deferred))
    :custom
    (lsp-log-io nil)
    (lsp-headerline-breadcrumb-enable t)
    (lsp-headerline-breadcrumb-segments '(project path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
    (lsp-modeline-code-actions-enable nil)
    (lsp-keymap-prefix "M-l")
    (lsp-prefer-capf t)
    (lsp-lens-enable nil)
    (lsp-completion-provider :none)
    (lsp-completion-enable t)
    (lsp-enable-imenu t)
    (lsp-disabled-clients '((python-mode . pyls)))

    ;; Rust-analyzer is the almost official lsp server for Rust
    (lsp-rust-server 'rust-analyzer)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :commands lsp

    :config
    ;; Temporary solution until https://github.com/emacs-lsp/lsp-mode/pull/3637 is merged
    (defcustom lsp-cut-signature 'space
      "If non-nil, signatures returned on hover will not be split on newline."
      :group 'lsp-ocaml
      :type '(choice (symbol :tag "Default behaviour" 'cut)
                     (symbol :tag "Display all the lines with spaces" 'space)))

    (cl-defmethod lsp-clients-extract-signature-on-hover (contents (_server-id (eql ocaml-lsp-server)) &optional storable)
      "Extract a representative line from OCaml's CONTENTS, to show in the echo area.
  This function splits the content between the signature
  and the documentation to display the signature
  and truncate it if it's too wide.
  The STORABLE argument is used if you want to use this
  function to get the type and, for example, kill and yank it."
      (let ((type (s-trim (lsp--render-element (lsp-make-marked-string
                                                :language "ocaml"
                                                :value (car (s-split "---" (lsp--render-element contents))))))))
        (if (equal nil storable)
            (if (eq lsp-cut-signature 'cut)
                (car (s-lines type))
              ;; else lsp-cut-signature is 'space
              (let ((ntype (s-replace "\n" " " type)))
                (if (>= (length ntype) (frame-width))
                    (concat (substring ntype 0 (- (frame-width) 4)) "...")
                  ntype)))
          type)))

    ;;- end of temporary solution

    (defvar mdrp/type-map
      (let ((keymap (make-sparse-keymap)))
        (define-key keymap (kbd "C-w") #'mdrp/lsp-get-type-and-kill)
        keymap)
      "The local map to navigate type enclosing.")

    (defun mdrp/set-type-map (&rest r)
      (set-transient-map mdrp/type-map)
      )

    (advice-add 'lsp-describe-thing-at-point :after #'mdrp/set-type-map)

    (defun mdrp/lsp-get-type-and-kill ()
      (interactive)
      (let ((contents (-some->> (lsp--text-document-position-params)
                        (lsp--make-request "textDocument/hover")
                        (lsp--send-request)
                        (lsp:hover-contents))))
        (let ((contents (and contents
                             (lsp--render-on-hover-content
                              contents
                              t))))
          (let ((contents
                 (pcase (lsp-workspaces)
                   (`(,workspace)
                    (lsp-clients-extract-signature-on-hover
                     contents
                     (lsp--workspace-server-id workspace)
                     t))
                   (lsp-clients-extract-signature-on-hover
                    contents
                    nil)
                   )))
            (message "Copied %s to kill-ring" contents)
            (kill-new contents)
            ))))
    (which-key-add-keymap-based-replacements lsp-command-map "u" "UI")
    (lsp-enable-which-key-integration t)
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection
                       '("opam" "exec" "--" "ocamllsp"))
      :major-modes '(caml-mode tuareg-mode)
      :server-id 'ocaml-lsp-server))
    :general
    ("M-l" 'lsp-command-map)
    ("C-c C-t" 'lsp-describe-thing-at-point)
    ("C-c C-w" 'mdrp/lsp-get-type-and-kill)
    ("C-c C-l" 'lsp-find-definition)
    ("C-c &"   'pop-global-mark :keymaps 'override)
    (:keymaps 'lsp-command-map
              "d"   'lsp-find-definition
              "r"   'lsp-find-references
              "n"   'lsp-ui-find-next-reference
              "p"   'lsp-ui-find-prev-reference
              "i"   'counsel-semantic-or-imenu
              "R"   'lsp-rename
              "f"   'consult-flycheck
              "t r" 'lsp-treemacs-references
              "t s" 'lsp-treemacs-symbols
              ))
#+END_SRC

** [[https://github.com/emacs-lsp/lsp-ui][Lsp ui]]
:PROPERTIES:
:CUSTOM_ID: lsp-ui
:END:

#+BEGIN_SRC emacs-lisp
  ;; Useful link : https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-delay 0.9)
    (lsp-ui-doc-position 'at-point)
    ;; Whether or not to enable the header which displays the symbol string.
    (lsp-ui-doc-header t)
    ;; Whether or not to include the object signature/type in the frame.
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)
    ;; Border color of the frame
    (lsp-ui-doc-border (face-foreground 'default))
    ;; Whether or not to enable lsp-ui-sideline
    (lsp-ui-sideline-enable nil)
    ;; Ignore duplicates when there is a same symbol with same contents
    ;; (lsp-ui-sideline-ignore-duplicate t)
    ;; Whether to show code actions in sideline.
    ;; (lsp-ui-sideline-show-code-actions nil)
    :general
    ("C-M-d" 'lsp-ui-doc-show)
    ("C-c i" 'lsp-ui-imenu)
    (:keymaps 'lsp-ui-mode-map
              [remap xref-find-definitions] 'lsp-ui-peek-find-definitions
              [remap xref-find-references] 'lsp-ui-peek-find-references
          )
    (:keymaps 'lsp-command-map
          "u f" 'lsp-ui-doc-focus-frame
          "u i" 'lsp-ui-imenu
          )
    )
#+END_SRC

** [[https://github.com/emacs-lsp/lsp-treemacs][Lsp treemacs]]
:PROPERTIES:
:CUSTOM_ID: lsp-treemacs
:END:

#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :after lsp
    )
#+END_SRC

** TODO [[https://github.com/gagbo/consult-lsp][Consult lsp]]
:PROPERTIES:
:CUSTOM_ID: consult-lsp
:END:

TODO: Not working with OCaml

#+BEGIN_SRC emacs-lisp
  (use-package consult-lsp
    :ensure t
    :disabled)
#+END_SRC

* TODO [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][Tree sitter]]
:PROPERTIES:
:CUSTOM_ID: tree-sitter
:END:

Minor mode that uses tree-sitter, an incremental parsing library. As well as LSP use incremental compilation to give useful informations about programs, tree-sitter use incremental parsing of current buffer to help with syntax highlighting, code folding etc.

TODO: Use tree-sitter for syntax highlighting instead of font-lock-mode

** Main mode
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  ;; This package needs to be loaded to use language parsers
  (use-package tree-sitter-langs
    :ensure t
    )

  (use-package tree-sitter
    :ensure t
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode)
    :config
    ;; This makes every node a link to a section of code
    (setq tree-sitter-debug-jump-buttons t)
    ;; and this highlights the entire sub tree in your code
    (setq tree-sitter-debug-highlight-jump-region t)
    (global-tree-sitter-mode))
#+END_SRC

** Tree sitter folding
:PROPERTIES:
:CUSTOM_ID: tree-sitter-folding
:END:

Code folding based on tree-sitter tree.

#+BEGIN_SRC emacs-lisp
  (use-package ts-fold
    :load-path "lisp/ts-fold/"
    :hook
    (tuareg-mode . ts-fold-mode)
    (c++-mode    . ts-fold-mode)
    (python-mode . ts-fold-mode)
    (rustic-mode . ts-fold-mode)
    )

  (use-package ts-fold-indicators
    :load-path "lisp/ts-fold/"
    :config
    (setq ts-fold-indicators-fringe 'left-fringe)
    (setq ts-fold-indicators-priority 100)
    :hook
    (tree-sitter-after-on . ts-fold-indicators-mode)
    )

#+END_SRC

* Programming languages
:PROPERTIES:
:CUSTOM_ID: programming-languages
:END:

** Data/Config formats
:PROPERTIES:
:CUSTOM_ID: dataconfig-formats
:END:

*** Conf mode
:PROPERTIES:
:CUSTOM_ID: conf-mode
:END:

Mode for editing config files.

This mode will install ~taplo~ through ~cargo~ if it's not already installed to manage toml files with lsp-mode.


#+BEGIN_SRC emacs-lisp
  (use-package conf-mode
    :ensure nil
    :mode (
           ("/\\.merlin\\'" . conf-mode)
           ("_tags\\'" . conf-mode)
           ("_log\\'" . conf-mode)
           ("\\.toml\\'" . conf-toml-mode)
           ))
#+END_SRC

*** [[https://github.com/joshwnj/json-mode][Json]]
:PROPERTIES:
:CUSTOM_ID: json
:END:

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure nil
    :mode (("\\.bowerrc$"     . json-mode)
           ("\\.jshintrc$"    . json-mode)
           ("\\.json_schema$" . json-mode)
           ("\\.json\\'" . json-mode))
    :general
    (:keymaps 'json-mode-map
              "C-c <tab>" 'json-mode-beautify
              "<tab>" 'hs-toggle-hiding
              "C-c C-a" 'hs-show-all
              "C-c C-t" 'hs-hide-all
              "C-c C-l" 'hs-hide-level
              )
    :config
    (make-local-variable 'js-indent-level))
#+END_SRC

Library for parsing and generating JSON

#+BEGIN_SRC emacs-lisp
  (use-package json
    :config
    (defun get-secrets-config-value (key)
      "Return the value of the json file secrets for key"
      (cdr (assoc key (json-read-file "~/.secrets/secrets.json")))
      )
    )
#+END_SRC

*** Dune files
:PROPERTIES:
:CUSTOM_ID: dune-files
:END:

#+BEGIN_SRC emacs-lisp
  (use-package dune
    :ensure t
    :mode ("^dune$" "^dune-project$")
    :init
    (define-prefix-command 'mdrp-dune-map nil "Dune-")
    :general
    ("M-d" mdrp-dune-map)
    (:keymaps 'mdrp-dune-map
              "C-c" 'compile
              "l" 'dune-insert-library-form
              "e" 'dune-insert-executable-form
              "x" 'dune-insert-executables-form
              "r" 'dune-insert-rule-form
              "p" 'dune-insert-ocamllex-form
              "y" 'dune-insert-ocamlyacc-form
              "m" 'dune-insert-menhir-form
              "a" 'dune-insert-alias-form
              "i" 'dune-insert-install-form
              "c" 'dune-insert-copyfiles-form
              "t" 'dune-insert-tests-form
              "v" 'dune-insert-env-form
              "d" 'dune-insert-ignored-subdirs-form))
#+END_SRC

*** Makefile
:PROPERTIES:
:CUSTOM_ID: makefile
:END:

#+BEGIN_SRC emacs-lisp
  (use-package make-mode
    :ensure nil
    :hook (make-mode . semantic-mode)
    )
#+END_SRC

** Elisp
:PROPERTIES:
:CUSTOM_ID: elisp
:END:

#+BEGIN_SRC emacs-lisp
  (use-package elisp-mode
    :hook (elisp-mode . semantic-mode)
    )
#+END_SRC

** [[https://github.com/fsharp/emacs-fsharp-mode][Fsharp]]
:PROPERTIES:
:CUSTOM_ID: fsharp
:END:

#+BEGIN_SRC emacs-lisp
  (when use-fsharp
    (use-package fsharp-mode
      :init
      (add-to-list 'exec-path (concat (getenv "HOME") "/.dotnet"))
      (add-to-list 'exec-path (concat (getenv "HOME") "/.dotnet/tools"))
      (setenv "PATH"
              (concat
               (concat (getenv "HOME") "/.dotnet")
               ":"
               (concat (getenv "HOME") "/.dotnet/tools")
               ":"
               (getenv "PATH")))
      :defer t
      :ensure t))
#+END_SRC

** [[https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode][Kotlin]]
:PROPERTIES:
:CUSTOM_ID: kotlin
:END:

#+BEGIN_SRC emacs-lisp
  (when use-kotlin
    (use-package kotlin-mode
      :ensure t))
#+END_SRC

** LaTeX
:PROPERTIES:
:CUSTOM_ID: latex
:END:

If you want to use it, after downloading ~auctex-latexmk~ replace ~(require tex-buf)~ with ~(require tex)~ in ~auctex-latexmk.el~.

#+BEGIN_SRC emacs-lisp
  (when use-latex
    (use-package tex-site
      :ensure auctex
      :mode ("\\.tex\\'" . latex-mode)
      :config
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (reftex-isearch-minor-mode)
      (setq TeX-PDF-mode t)
      (setq TeX-source-correlate-method 'synctex)
      (setq TeX-source-correlate-start-server t)
      )

    (use-package auctex-latexmk
      :after tex-site
      :config
      (auctex-latexmk-setup)
      (setq auctex-latexmk-inherit-TeX-PDF-mode t)
      )
    )
#+END_SRC

** Markdown
:PROPERTIES:
:CUSTOM_ID: markdown
:END:

*** [[https://github.com/jrblevin/markdown-mode][Main mode]]
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (when use-markdown
    (use-package markdown-mode
      :ensure t
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'"       . markdown-mode)
             ("\\.markdown\\'" . gfm-mode))
      :init
      (setq native-comp-deferred-compilation-deny-list '("markdown-mode\\.el$"))
      (setq markdown-command "markdown")
      (setq markdown-open-command "retext")
      :hook (gfm-mode . (lambda ()
                          (setq-local markdown-command "pandoc --metadata title:Title -t html5 --css ~/markdown_css/github-markdown-dark.css -f gfm -s")))
      ))
#+END_SRC

*** [[https://github.com/ardumont/markdown-toc][Markdown toc]]
:PROPERTIES:
:CUSTOM_ID: markdown-toc
:END:

#+BEGIN_SRC emacs-lisp
  (when use-markdown
    (use-package markdown-toc
      :ensure t))
#+END_SRC

*** [[https://github.com/joostkremers/pandoc-mode][Pandoc]]
:PROPERTIES:
:CUSTOM_ID: pandoc
:END:

#+BEGIN_SRC emacs-lisp
  (when use-pandoc
    (use-package pandoc-mode
      :ensure-system-package pandoc
      :ensure t
      :hook ((markdown-mode . pandoc-mode)
             (pandoc-mode . pandoc-load-default-settings))))
#+END_SRC

** Michelson
:PROPERTIES:
:CUSTOM_ID: michelson
:END:

#+BEGIN_SRC emacs-lisp
  (when use-michelson
    (use-package deferred
      :ensure t)

    ;; TODO: rewrite it without hardcoded paths
    (load (concat (getenv "HOME") "/dev/nl/tezos/emacs/michelson-mode.el") nil t)
    (setq michelson-client-command (concat (getenv "HOME") "/dev/nl/tezos/tezos-client"))
    (setq michelson-alphanet nil))
#+END_SRC

** OCaml
:PROPERTIES:
:CUSTOM_ID: ocaml
:END:

*** Useful functions
:PROPERTIES:
:CUSTOM_ID: useful-functions
:END:

#+BEGIN_SRC emacs-lisp
  ;; tuareg-mode has the prettify symbols itself
  ;; (ligature-set-ligatures 'tuareg-mode '(tuareg-prettify-symbols-basic-alist))
  ;; (ligature-set-ligatures 'tuareg-mode '(tuareg-prettify-symbols-extra-alist))
  ;; harmless if `prettify-symbols-mode' isn't active
  ;; (setq tuareg-prettify-symbols-full t)
  (defun mdrp/opam-shell-command-to-string (command)
    "Similar to shell-command-to-string, but returns nil unless the process
    returned 0, and ignores stderr (shell-command-to-string ignores return value)"
    (let* ((return-value 0)
           (return-string
            (with-output-to-string
              (setq return-value
                    (with-current-buffer standard-output
                      (process-file shell-file-name nil '(t nil) nil
                                    shell-command-switch command))))))
      (if (= return-value 0) return-string nil)))

  (defun mdrp/load-path-opam (&rest _)
    (let ((opam-share
           (let ((reply (mdrp/opam-shell-command-to-string "opam var share --safe")))
             (when reply (substring reply 0 -1)))))
      (message opam-share)
      (let ((path (concat opam-share "/emacs/site-lisp")))
        (message "Path is %s" path)
        path
        )
      ))

  (defun mdrp/erase-and-fill-buffer (buffer)
    "Erase the current BUFFER and move point to beginning of buffer."
    (with-current-buffer buffer
      (let ((npoint (search-backward "**********")))
        (message "Buffer %S" buffer)
        (goto-char npoint)
        (message "Point %S" npoint)
        (set-window-point (get-buffer-window buffer) (point))
        (message "Window Point %S" (window-point (get-buffer-window buffer))))))

  ;; TODO: This function should be its own package
  (defun mdrp/dune-watch (exe)
    "Will call dune build -w EXE on an async process."
    (interactive "sBuild name: ")
    (let ((buffer (get-buffer-create "*compilation*")))
      (projectile-run-async-shell-command-in-root (concat "dune build -w " exe) buffer)
      ;; Make this process non blocking for killing
      (defun mdrp/erase-and-fill-buffer-no-lambda ()
        "Wrapper to avoid using lambda"
        (mdrp/erase-and-fill-buffer buffer))
      (add-hook 'after-save-hook #'mdrp/erase-and-fill-buffer-no-lambda)
      (with-current-buffer buffer (compilation-minor-mode t))
      (set-process-query-on-exit-flag (get-buffer-process buffer) nil)
      (display-buffer buffer '((display-buffer-below-selected display-buffer-at-bottom)
                               (inhibit-same-window . t)
                               (window-height . 0.2)))))
#+END_SRC

*** [[https://github.com/ocaml/tuareg][Main mode]]
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (when use-ocaml
    (use-package tuareg
      :ensure t
      :ensure-system-package
      (ocamllsp . "opam install ocaml-lsp-server")
      (ocamlformat . "opam install ocamlformat")
      :mode ("\\.ml\\'" . tuareg-mode)
      ;; The following line can be used instead of :ensure t to load
      ;; the tuareg.el file installed with tuareg when running opam install tuareg
      ;; I'm not really sure that it's useful.
      ;; :load-path (lambda () (mdrp/load-path-opam))
      :custom
      (tuareg-other-file-alist
       '(("\\.\\(?:pp\\.\\)?mli\\'" (".ml" ".mll" ".mly" ".pp.ml"))
         ("_intf\\.ml\\'" (".ml"))
         ("\\.\\(?:pp\\.\\)?ml\\'" (".mli" "_intf.ml"))
         ("\\.mll\\'" (".mli"))
         ("\\.mly\\'" (".mli"))
         ("\\.eliomi\\'" (".eliom"))
         ("\\.eliom\\'" (".eliomi"))))
      :general
      (:keymaps 'tuareg-mode-map
                "C-c C-t" nil
                "C-c C-w" nil
                "C-c C-l" nil
                "C-c w"   'mdrp/dune-watch
                )
      :config
      ;; Use opam to set environment
      (setq tuareg-opam-insinuate t)
      (setq tuareg-electric-indent t)

      (tuareg-opam-update-env (tuareg-opam-current-compiler))
      (defun mdrp/update-opam-env (&rest _)
        (when (derived-mode-p 'tuareg-mode)
          (tuareg-opam-update-env nil)
          ))

      (defun mdrp/update-load-path-opam (&rest _)
        (when (derived-mode-p 'tuareg-mode)
          (let ((opam-share
                 (let ((reply (mdrp/opam-shell-command-to-string "opam var share --safe")))
                   (when reply (substring reply 0 -1)))))
            (add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
            )
          ))

      (if (boundp 'window-buffer-change-functions)
          (progn
            (add-hook 'window-buffer-change-functions 'mdrp/update-opam-env)
            (add-hook 'window-buffer-change-functions 'mdrp/update-load-path-opam)
            )
        (progn
          (add-hook 'post-command-hook 'mdrp/update-opam-env)
          (add-hook 'post-command-hook 'mdrp/update-load-path-opam)
          ))

      :hook
      (tuareg-mode .
                   (lambda ()
                     ;; Commented symbols are actually prettier with ligatures or just ugly
                     (setq prettify-symbols-alist
                           '(
                             ("sqrt" . ?√)
                             ("&&" . ?⋀)        ; 'N-ARY LOGICAL AND' (U+22C0)
                             ("||" . ?⋁)        ; 'N-ARY LOGICAL OR' (U+22C1)
                             ("<>" . ?≠)
                             ;; Some greek letters for type parameters.
                             ("'a" . ?α)
                             ("'b" . ?β)
                             ("'c" . ?γ)
                             ("'d" . ?δ)
                             ("'e" . ?ε)
                             ("'f" . ?φ)
                             ("'i" . ?ι)
                             ("'k" . ?κ)
                             ("'m" . ?μ)
                             ("'n" . ?ν)
                             ("'o" . ?ω)
                             ("'p" . ?π)
                             ("'r" . ?ρ)
                             ("'s" . ?σ)
                             ("'t" . ?τ)
                             ("'x" . ?ξ)
                             ("fun" . ?λ)
                             ("not" . ?￢)
                             (":=" . ?⟸)
                             ))))))

  (when use-ocaml
    (use-package ocp-indent
      ;; must be careful to always defer this, it has autoloads that adds hooks
      ;; which we do not want if the executable can't be found
      :ensure t
      :hook
      (tuareg-mode . mdrp/ocaml-init-ocp-indent-h)
      :config
      (defun mdrp/ocaml-init-ocp-indent-h ()
        "Run `ocp-setup-indent', so long as the ocp-indent binary exists."
        (when (executable-find "ocp-indent")
          (ocp-setup-indent)))
      ))
#+END_SRC

*** Tuareg Menhir
:PROPERTIES:
:CUSTOM_ID: tuareg-menhir
:END:

Special tuareg mode when editing ~mly~ files.

#+BEGIN_SRC emacs-lisp
  (when use-ocaml
    (use-package tuareg-menhir
      :mode ("\\.mly'" . tuareg-menhir-mode)
    ))
#+END_SRC

*** Dune commands
:PROPERTIES:
:CUSTOM_ID: dune-commands
:END:

#+BEGIN_SRC emacs-lisp
  (when use-ocaml
    (use-package dune-minor
      :load-path "lisp/"
      :hook (tuareg-mode . dune-minor-mode)))
#+END_SRC

** [[https://github.com/politza/pdf-tools][Pdf files]]
:PROPERTIES:
:CUSTOM_ID: pdf-files
:END:

In order to use this package you need to run ~M-x pdf-tools-install~ the first time your configuration is loaded.

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
    (setq pdf-view-use-scaling t
          pdf-view-use-imagemagick nil)
    :hook
    (pdf-view-mode . (lambda () (nlinum-mode 0))))
#+END_SRC

*** [[https://github.com/nicolaisingh/saveplace-pdf-view][Saveplace in pdf]]
:PROPERTIES:
:CUSTOM_ID: saveplace-in-pdf
:END:

#+BEGIN_SRC emacs-lisp
  (use-package saveplace-pdf-view
    :ensure t
    :after pdf-view)
#+END_SRC

** Python
:PROPERTIES:
:CUSTOM_ID: python
:END:

*** [[https://gitlab.com/python-mode-devs/python-mode][Main mode]]
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (when use-python
    (use-package python
      :ensure t
      :config
      ;; Remove guess indent python message
      (setq python-indent-guess-indent-offset-verbose nil)
      ;; Use IPython when available or fall back to regular Python
      (cond
       ((executable-find "ipython")
        (progn
          (setq python-shell-buffer-name "IPython")
          (setq python-shell-interpreter "ipython")
          (setq python-shell-interpreter-args "-i --simple-prompt")))
       ((executable-find "python3")
        (setq python-shell-interpreter "python3"))
       ((executable-find "python2")
        (setq python-shell-interpreter "python2"))
       (t
        (setq python-shell-interpreter "python")))
      :hook (python-mode . semantic-mode)))
#+END_SRC

*** [[https://github.com/jorgenschaefer/pyvenv][Pyvenv]]
:PROPERTIES:
:CUSTOM_ID: pyvenv
:END:
Required to easily switch virtual envs via the menu bar or with ~pyvenv-workon~

Setting the ~WORKON_HOME~ environment variable points at where the envs are located.

#+BEGIN_SRC emacs-lisp
  (when use-python
    (use-package pyvenv
      :ensure t
      :defer t
      :config
      ;; Setting work on to easily switch between environments
      (setenv "WORKON_HOME" (expand-file-name "~/miniconda3/envs/"))
      ;; Display virtual envs in the menu bar
      (setq pyvenv-menu t)
      ;; Restart the python process when switching environments
      (add-hook 'pyvenv-post-activate-hooks (lambda ()
                                              (pyvenv-restart-python)))
      :hook (python-mode . pyvenv-mode)))
#+END_SRC

*** [[https://github.com/emacs-lsp/lsp-pyright][Lsp pyright]]
:PROPERTIES:
:CUSTOM_ID: lsp-pyright
:END:

Language server for Python

Read the docs for the different variables set in the config.

#+BEGIN_SRC emacs-lisp
  (when use-python
    (use-package lsp-pyright
      :ensure t
      :defer t
      :config
      (setq lsp-clients-python-library-directories '("/usr/" "~/miniconda3/pkgs"))
      (setq lsp-pyright-disable-language-service nil
            lsp-pyright-disable-organize-imports nil
            lsp-pyright-auto-import-completions t
            lsp-pyright-use-library-code-for-types t
            lsp-pyright-venv-path "~/miniconda3/envs")
      ))
#+END_SRC

** [[https://github.com/reasonml-editor/reason-mode][Reason]]
:PROPERTIES:
:CUSTOM_ID: reason
:END:

Some people use this, not my responsibility.

#+BEGIN_SRC emacs-lisp
(when use-reason
  (defun shell-cmd (cmd)
    "Returns the stdout output of a shell command or nil if the command returned
   an error"
    (car (ignore-errors (apply 'process-lines (split-string cmd)))))

  (defun reason-cmd-where (cmd)
    (let ((where (shell-cmd cmd)))
      (if (not (string-equal "unknown flag ----where" where))
          where)))

  (let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
                        (shell-cmd "which refmt")
                        (shell-cmd "which bsrefmt")))
         (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
                         (shell-cmd "which ocamlmerlin")))
         (merlin-base-dir (when merlin-bin
                            (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
    ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
    (when merlin-bin
      (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
      (setq merlin-command merlin-bin))

    (when refmt-bin
      (setq refmt-command refmt-bin)))

  (use-package reason-mode
    :ensure t
    :config
    (add-hook
     'reason-mode-hook
     (lambda ()
       (add-hook 'before-save-hook 'refmt-before-save)
       (merlin-mode)))))
#+END_SRC

** [[https://github.com/rust-lang/rust-mode][Rust]]
:PROPERTIES:
:CUSTOM_ID: rust
:END:

#+BEGIN_SRC emacs-lisp
  (when use-rust
    (use-package rustic
      :ensure t
      :ensure-system-package
      (taplo . "cargo install taplo-cli")
      (rustfmt . "cargo install rustfmt")
      :mode "\\.rs'"
      ;; :hook
      ;; (rustic-mode-local-vars . tree-sitter 'append)
      ;; :hook (rust-mode . my/rust-mode-outline-regexp-setup)
      :general
      (:keymaps 'rust-mode-map
                "C-c s" 'lsp-rust-analyzer-status
                "C-M-;" 'mdrp/rust-doc-comment-dwim-following
                "C-M-," 'mdrp/rust-doc-comment-dwim-enclosing
                [remap compile] 'rustic-compile
                [remap recompile] 'rustic-recompile
                )
      :config
      ;; Conflicts with (and is redundant with) ligatures
      (setq rust-prettify-symbols-alist nil)
      ;; Allign to `.`
      (setq rustic-indent-method-chain t)
      ;; Let apheleia handle reformatting
      (setq rustic-babel-format-src-block nil)
      (setq rustic-format-trigger nil)
      ;; uncomment for less flashiness
      ;; (setq lsp-eldoc-hook nil)
      ;; (setq lsp-enable-symbol-highlighting nil)
      ;; (setq lsp-signature-auto-activate nil)
      ;; (defun my/rust-mode-outline-regexp-setup ()
      ;;   (setq-local outline-regexp "///[;]\\{1,8\\}[^ \t]"))
      (defun mdrp/rust-doc-comment-dwim (c)
        "Comment or uncomment the current line or text selection."
        (interactive)

        ;; If there's no text selection, comment or uncomment the line
        ;; depending whether the WHOLE line is a comment. If there is a text
        ;; selection, using the first line to determine whether to
        ;; comment/uncomment.
        (let (p1 p2)
          (if (use-region-p)
              (save-excursion
                (setq p1 (region-beginning) p2 (region-end))
                (goto-char p1)
                (if (wholeLineIsCmt-p c)
                    (mdrp/uncomment-region p1 p2 c)
                  (mdrp/comment-region p1 p2 c)
                  ))
            (progn
              (if (wholeLineIsCmt-p c)
                  (mdrp/uncomment-current-line c)
                (mdrp/comment-current-line c)
                )))))

      (defun mdrp/wholeLineIsCmt-p (c)
        (save-excursion
          (beginning-of-line 1)
          (looking-at (concat "[ \t]*//" c))
          ))

      (defun mdrp/comment-current-line (c)
        (interactive)
        (beginning-of-line 1)
        (insert (concat "//" c))
        )

      (defun mdrp/uncomment-current-line (c)
        "Remove “//c” (if any) in the beginning of current line."
        (interactive)
        (when (wholeLineIsCmt-p c)
          (beginning-of-line 1)
          (search-forward (concat "//" c))
          (delete-backward-char 4)
          ))

      (defun mdrp/comment-region (p1 p2 c)
        "Add “//c” to the beginning of each line of selected text."
        (interactive "r")
        (let ((deactivate-mark nil))
          (save-excursion
            (goto-char p2)
            (while (>= (point) p1)
              (mdrp/comment-current-line c)
              (previous-line)
              ))))

      (defun mdrp/uncomment-region (p1 p2 c)
        "Remove “//c” (if any) in the beginning of each line of selected text."
        (interactive "r")
        (let ((deactivate-mark nil))
          (save-excursion
            (goto-char p2)
            (while (>= (point) p1)
              (mdrp/uncomment-current-line c)
              (previous-line) )) ))

      (defun mdrp/rust-doc-comment-dwim-following ()
        (interactive)
        (mdrp/rust-doc-comment-dwim "/ "))

      (defun mdrp/rust-doc-comment-dwim-enclosing ()
        (interactive)
        (mdrp/rust-doc-comment-dwim "! "))
      ))
#+END_SRC

** Web modes
:PROPERTIES:
:CUSTOM_ID: web-modes
:END:

*** [[https://github.com/fxbois/web-mode][Main mode]]
:PROPERTIES:
:CUSTOM_ID: main-mode
:END:

#+BEGIN_SRC emacs-lisp
  (when use-web
    (use-package web-mode
      :ensure t
      :mode "\\.php\\'"
      ))
#+END_SRC

*** CSS mode
:PROPERTIES:
:CUSTOM_ID: css-mode
:END:

#+BEGIN_SRC emacs-lisp
  (when use-web
    (use-package css-mode
      :ensure nil
      :mode "\\.css\\'"))
#+END_SRC

* End
:PROPERTIES:
:CUSTOM_ID: end
:END:

After everything has been done, load [[file:post-custom.el][post-custom.el]] to override some keybindings and close [[file:init.el][init.el]].

#+BEGIN_SRC emacs-lisp
  (setq post-custom-file (expand-file-name "post-custom.el" user-emacs-directory))
  (load post-custom-file)

  ;;;; Footer

  ;; End:
  (provide 'init)

  ;;; init.el ends here
#+END_SRC
